/**
@license
Copyright 2019 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import '@material/mwc-notched-outline';
import { MDCFloatingLabelFoundation } from '@material/floating-label/foundation';
import { MDCLineRippleFoundation } from '@material/line-ripple/foundation';
import { FormElement } from '@material/mwc-base/form-element';
import { FloatingLabel } from '@material/mwc-floating-label';
import { LineRipple } from '@material/mwc-line-ripple';
import { NotchedOutline } from '@material/mwc-notched-outline';
import { MDCTextFieldAdapter, MDCTextFieldInputAdapter, MDCTextFieldLabelAdapter, MDCTextFieldLineRippleAdapter, MDCTextFieldOutlineAdapter, MDCTextFieldRootAdapter } from '@material/textfield/adapter';
import MDCTextFieldFoundation from '@material/textfield/foundation';
import { PropertyValues, TemplateResult } from 'lit-element';
import { nothing } from 'lit-html';
declare global {
    interface HTMLElement {
        floatingLabelFoundation?: MDCFloatingLabelFoundation;
        lineRippleFoundation?: MDCLineRippleFoundation;
    }
    interface Element {
        floatingLabelFoundation?: MDCFloatingLabelFoundation;
        lineRippleFoundation?: MDCLineRippleFoundation;
    }
}
/**
 * This is the enumerated typeof HTMLInputElement.type as declared by
 * lit-analyzer.
 */
export declare type TextFieldType = 'text' | 'search' | 'tel' | 'url' | 'email' | 'password' | 'date' | 'month' | 'week' | 'time' | 'datetime-local' | 'number' | 'color';
/**
 * This is the enumerated typeof HTMLInputElement.inputMode as declared by
 * lit-analyzer.
 */
export declare type TextFieldInputMode = 'verbatim' | 'latin' | 'latin-name' | 'latin-prose' | 'full-width-latin' | 'kana' | 'kana-name' | 'katakana' | 'numeric' | 'tel' | 'email' | 'url';
export declare type TextAreaCharCounter = 'external' | 'internal';
export declare abstract class TextFieldBase extends FormElement {
    protected mdcFoundation: MDCTextFieldFoundation;
    protected readonly mdcFoundationClass: typeof MDCTextFieldFoundation;
    protected mdcRoot: HTMLElement;
    protected formElement: HTMLInputElement;
    protected labelElement: FloatingLabel | null;
    protected lineRippleElement: LineRipple | null;
    protected outlineElement: NotchedOutline | null;
    protected notchElement: HTMLElement;
    value: string;
    type: TextFieldType;
    placeholder: string;
    label: string;
    icon: string;
    iconTrailing: string;
    disabled: boolean;
    required: boolean;
    minLength: number;
    maxLength: number;
    outlined: boolean;
    helper: string;
    validateOnInitialRender: boolean;
    validationMessage: string;
    autoValidate: boolean;
    pattern: string;
    min: number | string;
    max: number | string;
    step: number | null;
    size: number | null;
    helperPersistent: boolean;
    charCounter: boolean | TextAreaCharCounter;
    endAligned: boolean;
    prefix: string;
    suffix: string;
    name: string;
    inputMode: TextFieldInputMode;
    readOnly: boolean;
    autocapitalize: string;
    protected outlineOpen: boolean;
    protected outlineWidth: number;
    protected isUiValid: boolean;
    protected _validity: ValidityState;
    protected _outlineUpdateComplete: null | Promise<unknown>;
    get validity(): ValidityState;
    get willValidate(): boolean;
    get selectionStart(): number | null;
    get selectionEnd(): number | null;
    protected get shouldRenderHelperText(): boolean;
    protected get charCounterVisible(): boolean;
    validityTransform: ((value: string, nativeValidity: ValidityState) => Partial<ValidityState>) | null;
    focus(): void;
    blur(): void;
    select(): void;
    setSelectionRange(selectionStart: number, selectionEnd: number, selectionDirection?: 'forward' | 'backward' | 'none'): void;
    update(changedProperties: PropertyValues): void;
    render(): TemplateResult;
    updated(changedProperties: PropertyValues): void;
    protected renderRipple(): {};
    protected renderOutline(): {};
    protected renderLabel(): {};
    protected renderLeadingIcon(): {};
    protected renderTrailingIcon(): {};
    protected renderIcon(icon: string, isTrailingIcon?: boolean): TemplateResult;
    protected renderPrefix(): {};
    protected renderSuffix(): {};
    protected renderAffix(content: string, isSuffix?: boolean): TemplateResult;
    protected renderInput(): TemplateResult;
    protected renderLineRipple(): {};
    protected renderHelperText(charCounterTemplate?: TemplateResult | typeof nothing): {};
    protected renderCharCounter(): {};
    protected onInputBlur(): void;
    checkValidity(): boolean;
    reportValidity(): boolean;
    protected _checkValidity(value: string): boolean;
    setCustomValidity(message: string): void;
    protected handleInputChange(): void;
    protected createFoundation(): void;
    protected createAdapter(): MDCTextFieldAdapter;
    protected getRootAdapterMethods(): MDCTextFieldRootAdapter;
    protected getInputAdapterMethods(): MDCTextFieldInputAdapter;
    protected getLabelAdapterMethods(): MDCTextFieldLabelAdapter;
    protected getLineRippleAdapterMethods(): MDCTextFieldLineRippleAdapter;
    _getUpdateComplete(): Promise<void>;
    firstUpdated(): Promise<void>;
    protected getOutlineAdapterMethods(): MDCTextFieldOutlineAdapter;
    layout(): Promise<void>;
}
