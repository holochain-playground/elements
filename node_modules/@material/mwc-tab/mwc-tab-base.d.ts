/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import '@material/mwc-tab-indicator';
import '@material/mwc-ripple/mwc-ripple';
import { BaseElement } from '@material/mwc-base/base-element';
import { Ripple } from '@material/mwc-ripple/mwc-ripple';
import { RippleHandlers } from '@material/mwc-ripple/ripple-handlers';
import { TabIndicator } from '@material/mwc-tab-indicator';
import { MDCTabAdapter } from '@material/tab/adapter';
import MDCTabFoundation from '@material/tab/foundation';
export interface TabInteractionEventDetail {
    tabId: string;
}
export declare class TabBase extends BaseElement {
    static shadowRootOptions: ShadowRootInit;
    protected mdcFoundation: MDCTabFoundation;
    protected readonly mdcFoundationClass: typeof MDCTabFoundation;
    protected mdcRoot: HTMLElement;
    protected tabIndicator: TabIndicator;
    label: string;
    icon: string;
    hasImageIcon: boolean;
    isFadingIndicator: boolean;
    minWidth: boolean;
    isMinWidthIndicator: boolean;
    get active(): boolean;
    indicatorIcon: string;
    stacked: boolean;
    focusOnActivate: boolean;
    protected _active: boolean;
    protected initFocus: boolean;
    /**
     * Other properties
     * indicatorContent <slot>
     * previousIndicatorClientRect (needed?)
     * onTransitionEnd (needed?)
     */
    protected _contentElement: HTMLElement;
    protected shouldRenderRipple: boolean;
    protected useStateLayerCustomProperties: boolean;
    ripple: Promise<Ripple | null>;
    protected rippleElement: Ripple | null;
    connectedCallback(): void;
    protected firstUpdated(): void;
    protected render(): import("lit-html").TemplateResult<1>;
    protected renderIndicator(): import("lit-html").TemplateResult<1>;
    /** @soyCompatible */
    protected renderRipple(): import("lit-html").TemplateResult<1> | "";
    protected createAdapter(): MDCTabAdapter;
    activate(clientRect: ClientRect): void;
    deactivate(): void;
    protected setActive(newValue: boolean): void;
    computeDimensions(): import("@material/tab/types").MDCTabDimensions;
    computeIndicatorClientRect(): ClientRect;
    focus(): void;
    protected rippleHandlers: RippleHandlers;
    protected handleClick(): void;
    protected handleFocus(): void;
    protected handleBlur(): void;
    protected handleRippleMouseDown(event: Event): void;
    protected handleRippleTouchStart(event: Event): void;
    protected handleRippleDeactivate(): void;
    protected handleRippleMouseEnter(): void;
    protected handleRippleMouseLeave(): void;
    protected handleRippleFocus(): void;
    protected handleRippleBlur(): void;
    get isRippleActive(): any;
}
