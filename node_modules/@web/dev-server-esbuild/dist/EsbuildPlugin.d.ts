import { Context, Plugin, Logger, DevServerCoreConfig } from '@web/dev-server-core';
import { Loader, Strict } from 'esbuild';
export interface EsbuildConfig {
    loaders: Record<string, Loader>;
    target: string | string[];
    handledExtensions: string[];
    tsFileExtensions: string[];
    jsxFactory?: string;
    jsxFragment?: string;
    strict?: boolean | Strict[];
    define?: {
        [key: string]: string;
    };
}
export declare class EsbuildPlugin implements Plugin {
    private config?;
    private esbuildConfig;
    private logger?;
    private service?;
    private transformedHtmlFiles;
    name: string;
    constructor(esbuildConfig: EsbuildConfig);
    serverStart({ config, logger }: {
        config: DevServerCoreConfig;
        logger: Logger;
    }): Promise<void>;
    serverStop(): void;
    onProcessKilled: () => void;
    resolveMimeType(context: Context): "js" | undefined;
    resolveImport({ source, context }: {
        source: string;
        context: Context;
    }): Promise<string | undefined>;
    transformCacheKey(context: Context): string;
    transform(context: Context): Promise<string | undefined>;
    private __transformHtml;
    private __transformCode;
}
//# sourceMappingURL=EsbuildPlugin.d.ts.map