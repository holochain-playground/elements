"use strict";

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("regenerator-runtime/runtime");

var _global = require("global");

var _axeCore = _interopRequireDefault(require("axe-core"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

if (module && module.hot && module.hot.decline) {
  module.hot.decline();
}

var channel = _addons["default"].getChannel();

var active = false;

var getElement = function getElement() {
  var storyRoot = _global.document.getElementById('story-root');

  return storyRoot ? storyRoot.children : _global.document.getElementById('root');
};

var run = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(storyId) {
    var input, _input$element, element, config, options, result;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            input = getParams(storyId);

            if (active) {
              _context.next = 12;
              break;
            }

            active = true;
            channel.emit(_constants.EVENTS.RUNNING);
            _input$element = input.element, element = _input$element === void 0 ? getElement() : _input$element, config = input.config, options = input.options;

            _axeCore["default"].reset();

            if (config) {
              _axeCore["default"].configure(config);
            }

            _context.next = 10;
            return _axeCore["default"].run(element, options);

          case 10:
            result = _context.sent;
            channel.emit(_constants.EVENTS.RESULT, result);

          case 12:
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](0);
            channel.emit(_constants.EVENTS.ERROR, _context.t0);

          case 17:
            _context.prev = 17;
            active = false;
            return _context.finish(17);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 14, 17, 20]]);
  }));

  return function run(_x) {
    return _ref.apply(this, arguments);
  };
}();
/** Returns story parameters or default ones. */


var getParams = function getParams(storyId) {
  var _ref2 = _global.window.__STORYBOOK_STORY_STORE__.fromId(storyId) || {},
      parameters = _ref2.parameters;

  return parameters.a11y || {
    config: {},
    options: {
      restoreScroll: true
    }
  };
};

channel.on(_constants.EVENTS.REQUEST, run);
channel.on(_constants.EVENTS.MANUAL, run);