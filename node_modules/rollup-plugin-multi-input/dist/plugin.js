"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.flat");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.map");

require("core-js/modules/es.array.unscopables.flat");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.string.replace");

require("core-js/modules/es.string.starts-with");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var fastGlob = _interopRequireWildcard(require("fast-glob"));

var _path = _interopRequireDefault(require("path"));

var _fromPairs = _interopRequireDefault(require("lodash/fromPairs"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _partition3 = _interopRequireDefault(require("lodash/partition"));

var _package = require("../package.json");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * default multi-input Options
 * */
var defaultOptions = {
  relative: 'src/'
}; // extract the output file name from a file name

var outputFileName = function outputFileName(filePath) {
  return filePath.replace(/\.[^/.]+$/, '');
};
/**
 * Callback for transforming output file path
 *
 * @callback TransformOutputPathFn
 * @param {string} output target file name
 * @param {string} input source file name
 */

/**
 *  multiInput is a rollup plugin to use multiple entry point and preserve the directory
 *  structure in the dist folder
 *
 *  @param {?Object} options
 *  @param {?FastGlob.Options} options.glob - the fast-glob configuration object
 *  @param {?string} options.relative - the base path to remove in the dist folder
 *  @param {?TransformOutputPathFn} options.transformOutputPath - callback function to
 *      transform the destination file name before generation
 *  @return {Plugin} - the rollup plugin config for enable support of multi-entry glob inputs
 * */


var _default = function _default() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions,
      globOptions = _ref.glob,
      _ref$relative = _ref.relative,
      relative = _ref$relative === void 0 ? defaultOptions.relative : _ref$relative,
      transformOutputPath = _ref.transformOutputPath;

  return {
    pluginName: _package.name,
    options: function options(conf) {
      // flat to enable input to be a string or an array
      // separate globs inputs string from others to enable input to be a mixed array too
      var _partition = (0, _partition3["default"])([conf.input].flat(), _isString["default"]),
          _partition2 = (0, _slicedToArray2["default"])(_partition, 2),
          globs = _partition2[0],
          others = _partition2[1]; // get files from the globs strings and return as a Rollup entries Object


      var input = Object.assign.apply(Object, [{}, (0, _fromPairs["default"])(fastGlob.sync(globs, globOptions).map(function (name) {
        var filePath = _path["default"].relative(relative, name);

        var isRelative = !filePath.startsWith('../');

        var relativeToRoot = function relativeToRoot() {
          return _path["default"].relative('./', name);
        };

        filePath = isRelative ? filePath : relativeToRoot();

        if (transformOutputPath) {
          filePath = transformOutputPath(filePath, name);
        }

        return [outputFileName(filePath), name];
      }))].concat((0, _toConsumableArray2["default"])(others))); // return the new configuration with the glob input and the non string inputs

      return _objectSpread({}, conf, {
        input: input
      });
    }
  };
};

exports["default"] = _default;