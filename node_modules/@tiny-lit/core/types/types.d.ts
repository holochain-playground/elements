export interface Expression {
    update(value: any): void;
    clear?(): void;
}
export interface TemplateInterface {
    update(values: any[]): void;
    create(): DocumentFragment;
    delete(): void;
    range?: [Node, Node];
    expressions?: Expression[];
    values: any[];
    strings?: TemplateStringsArray;
    context?: string;
    key?: string;
    withKey(key: string): TemplateInterface;
}
export declare type LinkSymbol = {
    type: new (...args: any[]) => void;
    name?: string;
    namespaceURI?: string | null;
    nodePath: Array<number>;
};
export declare type CacheEntry = {
    expressions: Array<LinkSymbol>;
    content: DocumentFragment;
};
export declare type TemplateArray = Map<string, TemplateInterface>;
export declare type SchedulerJob = {
    task: Function;
    args: any[];
    scheduled?: boolean;
    firstRun?: boolean;
};
export declare type SchedulerQueue = Array<SchedulerJob>;
export declare const enum JobPriority {
    Low = 0,
    Normal = 1,
    High = 2,
    Callback = 3
}
