export function comment(data = '') {
    return document.createComment(data);
}
export function text(data = '') {
    return document.createTextNode(data);
}
export function isNode(obj, type) {
    return (!!obj &&
        !!obj.nodeType &&
        (!type || obj.nodeType === type));
}
export function isPrimitive(val) {
    return val !== Object(val);
}
export function replaceRange(newNode, range) {
    const [startNode, endNode] = [].concat(range);
    if (!startNode.parentNode)
        return;
    if (endNode && startNode.nextSibling !== endNode) {
        removeNodes(startNode.nextSibling, endNode);
    }
    startNode.parentNode.replaceChild(newNode, startNode);
}
export function removeNodes(startNode, endNode = null, parent = startNode.parentNode) {
    if (!parent)
        return;
    while (startNode !== endNode) {
        const nextNode = startNode.nextSibling;
        parent.removeChild(startNode);
        startNode = nextNode;
    }
}
export function moveTemplate(template, after, parent = after.parentNode) {
    const [startNode, endNode] = template.range;
    const before = after.nextSibling;
    let node = startNode;
    do {
        const nextNode = node.nextSibling;
        parent.insertBefore(node, before);
        node = nextNode;
    } while (node !== endNode);
    parent.insertBefore(endNode, before);
}
export function getNodeIndex(node) {
    let index = 0;
    while ((node = node.previousSibling))
        index++;
    return index;
}
export function getNodePath(node) {
    const path = [];
    while (node.parentNode) {
        path.unshift(getNodeIndex(node));
        node = node.parentNode;
    }
    return path;
}
export function getNodeByPath(node, path) {
    for (let i = 0, l = path.length; i < l; i++)
        node = node.childNodes[path[i]];
    return node;
}
export const TemplateSymbol = Symbol();
export function isSameTemplate(t1, t2) {
    return isTemplate(t1) && isTemplate(t2) && t1.strings === t2.strings;
}
export function isTemplate(obj) {
    return obj && obj[TemplateSymbol];
}
export const MARKER_PREFIX = `__${Math.random().toString().slice(2)}_`;
export const MARKER_RE = new RegExp(`<!--${MARKER_PREFIX}(\\d+)-->|${MARKER_PREFIX}(\\d+)`);
export const TEXT_ELEMENT = /^(?:style|textarea)$/i;
export function markerNumber(value) {
    const m = MARKER_RE.exec(value);
    MARKER_RE.lastIndex = 0;
    return m ? Number(m[1] || m[2]) : -1;
}
