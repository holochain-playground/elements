var _a;
import { parseTemplate } from './parser';
import { TemplateSymbol, removeNodes, text } from './utils';
export class Template {
    constructor(strings, values, context) {
        this[_a] = true;
        this.values = values;
        this.strings = strings;
        this.context = context;
    }
    withKey(key) {
        this.key = key;
        return this;
    }
    update(values) {
        for (let i = 0; i < values.length; i++) {
            if (this.expressions[i])
                this.expressions[i].update(values[i]);
        }
    }
    delete() {
        removeNodes(this.range[0], this.range[1].nextSibling);
        this.range = undefined;
        this.expressions = undefined;
    }
    create() {
        const { fragment, expressions } = parseTemplate(this.strings, this.context);
        this.expressions = expressions;
        this.range = [
            fragment.insertBefore(text(), fragment.firstChild),
            fragment.appendChild(text())
        ];
        this.update(this.values);
        return fragment;
    }
}
_a = TemplateSymbol;
