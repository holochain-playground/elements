import { Template } from '@tiny-lit/core';
export declare type Constructor<T = {}> = new (...args: any[]) => T;
export interface Element {
    state: any;
    render(): Template | null;
    update(): void;
    setState(nextState: object | Function, callback?: Function): void;
    renderCallbacks: Array<Function>;
    afterRender?: Function;
    renderRoot: HTMLElement | ShadowRoot;
}
export interface CustomElement {
    connectedCallback?(): void;
    disconnectedCallback?(): void;
    adoptedCallback?(): void;
    attributeChangedCallback?(name: string, oldValue: string, newValue: string): void;
    observedAttributes?: Array<string>;
}
export declare type PropertyDescriptor = {
    type: Function;
    onChange?: Function;
};
export declare type ElementProperties<T> = {
    [P in keyof T]?: T[P];
};
export declare type AttributeMap = Map<string, string>;
export declare const PROPS: unique symbol;
export declare const ATTRS: unique symbol;
