import { render, scheduled } from '@tiny-lit/core';
export function withElement(Base) {
    return class extends Base {
        constructor() {
            super(...arguments);
            this.state = {};
            this.rendered = false;
            this.renderCallbacks = [];
            this.renderRoot = this;
            this._onUpdated = scheduled(() => {
                while (this.renderCallbacks.length)
                    this.renderCallbacks.shift()();
                this.rendered ? this.updated() : this.firstUpdated();
                this.rendered = true;
            }, 3);
        }
        attachShadow(shadowRootInitDict) {
            return (this.renderRoot = super.attachShadow.call(this, shadowRootInitDict));
        }
        connectedCallback() {
            this.update();
        }
        setState(nextState, callback) {
            const state = this.state;
            this.state = Object.assign(Object.assign({}, state), (typeof nextState === 'function'
                ? nextState(state, this)
                : nextState));
            callback && this.renderCallbacks.push(callback);
            this.update();
        }
        render() {
            return null;
        }
        firstUpdated() { }
        beforeUpdate() { }
        updated() { }
        update() {
            this.beforeUpdate();
            const template = this.render();
            template && render(template, this.renderRoot);
            this._onUpdated();
        }
        ;
    };
}
