{"version":3,"file":"index.js","sources":["../src/core/cell/dht/get.ts","../node_modules/blakejs/util.js","../node_modules/blakejs/blake2b.js","../node_modules/blakejs/blake2s.js","../node_modules/blakejs/index.js","../src/processors/hash.ts","../src/core/cell/utils.ts","../src/core/cell/dht/put.ts","../src/core/cell/source-chain/get.ts","../src/core/cell/source-chain/put.ts","../src/core/cell/source-chain/utils.ts","../src/core/cell/source-chain/builder-headers.ts","../src/core/cell/state.ts","../src/core/cell/workflows/integrate_dht_ops.ts","../src/core/cell/workflows/app_validation.ts","../src/core/hdk/host-fn/actions/create-entry.ts","../src/core/hdk/host-fn/actions/create-link.ts","../src/core/hdk/host-fn/hash-entry.ts","../src/core/hdk/path.ts","../src/core/hdk/context.ts","../src/core/cell/workflows/publish_dht_ops.ts","../src/core/cell/workflows/produce_dht_ops.ts","../src/core/cell/workflows/call_zome_fn.ts","../src/core/cell/workflows/genesis.ts","../src/core/cell/workflows/sys_validation.ts","../src/core/cell/workflows/incoming_dht_ops.ts","../src/executor/immediate-executor.ts","../src/core/cell/cell.ts","../src/core/network/p2p-cell.ts","../src/core/network/network.ts","../src/core/conductor.ts","../src/dnas/sample-dna.ts","../src/processors/message.ts","../src/processors/create-conductors.ts"],"sourcesContent":["import { deserializeHash, serializeHash } from '@holochain-open-dev/common';\nimport {\n  Dictionary,\n  Hash,\n  Header,\n  getSysMetaValHeaderHash,\n  LinkMetaVal,\n  EntryDhtStatus,\n  EntryDetails,\n  NewEntryHeader,\n  SignedHeaderHashed,\n  DHTOpType,\n} from '@holochain-open-dev/core-types';\nimport { isEqual, uniq } from 'lodash-es';\nimport {\n  CellState,\n  ValidationLimboStatus,\n  ValidationLimboValue,\n  IntegrationLimboValue,\n} from '../state';\n\nexport function getValidationLimboDhtOps(\n  state: CellState,\n  status: ValidationLimboStatus\n): Dictionary<ValidationLimboValue> {\n  const pendingDhtOps: Dictionary<ValidationLimboValue> = {};\n\n  for (const dhtOpHash of Object.keys(state.validationLimbo)) {\n    const limboValue = state.validationLimbo[dhtOpHash];\n\n    if (limboValue.status === status) {\n      pendingDhtOps[dhtOpHash] = limboValue;\n    }\n  }\n\n  return pendingDhtOps;\n}\n\nexport function pullAllIntegrationLimboDhtOps(\n  state: CellState\n): Dictionary<IntegrationLimboValue> {\n  const dhtOps = state.integrationLimbo;\n\n  state.integrationLimbo = {};\n\n  return dhtOps;\n}\n\nexport function getHeadersForEntry(\n  state: CellState,\n  entryHash: Hash\n): SignedHeaderHashed[] {\n  return state.metadata.system_meta[serializeHash(entryHash)]\n    .map(h => {\n      const hash = getSysMetaValHeaderHash(h);\n      if (hash) {\n        return state.CAS[serializeHash(hash)];\n      }\n      return undefined;\n    })\n    .filter(header => !!header);\n}\n\nexport function getLinksForEntry(\n  state: CellState,\n  entryHash: Hash\n): LinkMetaVal[] {\n  return state.metadata.link_meta\n    .filter(({ key, value }) => isEqual(key.base, entryHash))\n    .map(({ key, value }) => value);\n}\n\nexport function getEntryDhtStatus(\n  state: CellState,\n  entryHash: Hash\n): EntryDhtStatus | undefined {\n  const meta = state.metadata.misc_meta[serializeHash(entryHash)];\n\n  return meta\n    ? (meta as {\n        EntryStatus: EntryDhtStatus;\n      }).EntryStatus\n    : undefined;\n}\n\nexport function getEntryDetails(\n  state: CellState,\n  entryHash: Hash\n): EntryDetails {\n  const entry = state.CAS[serializeHash(entryHash)];\n  const headers = getHeadersForEntry(state, entryHash);\n  const dhtStatus = getEntryDhtStatus(state, entryHash);\n\n  return {\n    entry,\n    headers: headers,\n    entry_dht_status: dhtStatus as EntryDhtStatus,\n  };\n}\n\nexport function getAllHeldEntries(state: CellState): Hash[] {\n  const newEntryHeaders = Object.values(state.integratedDHTOps)\n    .filter(dhtOpValue => dhtOpValue.op.type === DHTOpType.StoreEntry)\n    .map(dhtOpValue => dhtOpValue.op.header);\n\n  const allEntryHashes = newEntryHeaders.map(\n    h => (h.header.content as NewEntryHeader).entry_hash\n  );\n\n  return uniq(allEntryHashes);\n}\n\nexport function getAllAuthoredEntries(state: CellState): Hash[] {\n  const allHeaders = Object.values(state.authoredDHTOps).map(\n    dhtOpValue => dhtOpValue.op.header\n  );\n\n  const newEntryHeaders: SignedHeaderHashed<NewEntryHeader>[] = allHeaders.filter(\n    h => (h.header.content as NewEntryHeader).entry_hash\n  ) as SignedHeaderHashed<NewEntryHeader>[];\n\n  return newEntryHeaders.map(h => h.header.content.entry_hash);\n}\n\nexport function isHoldingEntry(state: CellState, entryHash: Hash): boolean {\n  return state.metadata.system_meta[serializeHash(entryHash)] !== undefined;\n}\n\nexport interface EntryDHTInfo {\n  details: EntryDetails;\n  links: LinkMetaVal[];\n}\n\nexport function getDhtShard(state: CellState): Dictionary<EntryDHTInfo> {\n  const heldEntries = getAllHeldEntries(state);\n\n  const dhtShard: Dictionary<EntryDHTInfo> = {};\n\n  for (const entryHash of heldEntries) {\n    dhtShard[serializeHash(entryHash)] = {\n      details: getEntryDetails(state, entryHash),\n      links: getLinksForEntry(state, entryHash),\n    };\n  }\n\n  return dhtShard;\n}\n","var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\n\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput (input) {\n  var ret\n  if (input instanceof Uint8Array) {\n    ret = input\n  } else if (input instanceof Buffer) {\n    ret = new Uint8Array(input)\n  } else if (typeof (input) === 'string') {\n    ret = new Uint8Array(Buffer.from(input, 'utf8'))\n  } else {\n    throw new Error(ERROR_MSG_INPUT)\n  }\n  return ret\n}\n\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex (bytes) {\n  return Array.prototype.map.call(bytes, function (n) {\n    return (n < 16 ? '0' : '') + n.toString(16)\n  }).join('')\n}\n\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex (val) {\n  return (0x100000000 + val).toString(16).substring(1)\n}\n\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint (label, arr, size) {\n  var msg = '\\n' + label + ' = '\n  for (var i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase()\n      msg += ' '\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n      msg += uint32ToHex(arr[i]).toUpperCase()\n    } else throw new Error('Invalid size ' + size)\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ')\n    } else if (i < arr.length - 2) {\n      msg += ' '\n    }\n  }\n  console.log(msg)\n}\n\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed (hashFn, N, M) {\n  var startMs = new Date().getTime()\n\n  var input = new Uint8Array(N)\n  for (var i = 0; i < N; i++) {\n    input[i] = i % 256\n  }\n  var genMs = new Date().getTime()\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms')\n  startMs = genMs\n\n  for (i = 0; i < M; i++) {\n    var hashHex = hashFn(input)\n    var hashMs = new Date().getTime()\n    var ms = hashMs - startMs\n    startMs = hashMs\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\n    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND')\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n}\n","// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nvar util = require('./util')\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  var o0 = v[a] + v[b]\n  var o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  var o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  var o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return (arr[i] ^\n  (arr[i + 1] << 8) ^\n  (arr[i + 2] << 16) ^\n  (arr[i + 3] << 24))\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  var x0 = m[ix]\n  var x1 = m[ix + 1]\n  var y0 = m[iy]\n  var y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  var xor0 = v[d] ^ v[a]\n  var xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([\n  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,\n  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,\n  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,\n  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19\n])\n\nvar SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }))\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32)\nvar m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  var i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n  // util.debugPrint('   (i=12) v[16]', v, 64)\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n  // util.debugPrint('h[8]', ctx.h, 64)\n}\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction blake2bInit (outlen, key) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64')\n  }\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\n  }\n\n  // state, 'param block'\n  var ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0, // input count\n    c: 0, // pointer within buffer\n    outlen: outlen // output length in bytes\n  }\n\n  // initialize hash state\n  for (var i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i]\n  }\n  var keylen = key ? key.length : 0\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(ctx, key)\n    // at the end\n    ctx.c = 128\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  var out = new Uint8Array(ctx.outlen)\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2b (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 64\n  input = util.normalizeInput(input)\n\n  // do the math\n  var ctx = blake2bInit(outlen, key)\n  blake2bUpdate(ctx, input)\n  return blake2bFinal(ctx)\n}\n\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2bHex (input, key, outlen) {\n  var output = blake2b(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n}\n","// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nvar util = require('./util')\n\n// Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\nfunction B2S_GET32 (v, i) {\n  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)\n}\n\n// Mixing function G.\nfunction B2S_G (a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x\n  v[d] = ROTR32(v[d] ^ v[a], 16)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 12)\n  v[a] = v[a] + v[b] + y\n  v[d] = ROTR32(v[d] ^ v[a], 8)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 7)\n}\n\n// 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\nfunction ROTR32 (x, y) {\n  return (x >>> y) ^ (x << (32 - y))\n}\n\n// Initialization Vector.\nvar BLAKE2S_IV = new Uint32Array([\n  0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n  0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19])\n\nvar SIGMA = new Uint8Array([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0])\n\n// Compression function. \"last\" flag indicates last block\nvar v = new Uint32Array(16)\nvar m = new Uint32Array(16)\nfunction blake2sCompress (ctx, last) {\n  var i = 0\n  for (i = 0; i < 8; i++) { // init work variables\n    v[i] = ctx.h[i]\n    v[i + 8] = BLAKE2S_IV[i]\n  }\n\n  v[12] ^= ctx.t // low 32 bits of offset\n  v[13] ^= (ctx.t / 0x100000000) // high 32 bits\n  if (last) { // last block flag set ?\n    v[14] = ~v[14]\n  }\n\n  for (i = 0; i < 16; i++) { // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i)\n  }\n\n  // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]])\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]])\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]])\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]])\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]])\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]])\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]])\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]])\n  }\n  // util.debugPrint('   (i=10) v[16]', v, 32)\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8]\n  }\n  // util.debugPrint('h[8]', ctx.h, 32)\n}\n\n// Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\nfunction blake2sInit (outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]')\n  }\n  var keylen = key ? key.length : 0\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]')\n  }\n\n  var ctx = {\n    h: new Uint32Array(BLAKE2S_IV), // hash state\n    b: new Uint32Array(64), // input block\n    c: 0, // pointer within block\n    t: 0, // input count\n    outlen: outlen // output length in bytes\n  }\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key)\n    ctx.c = 64 // at the end\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2sUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 64) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2sCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2sFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n  while (ctx.c < 64) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2sCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  var out = new Uint8Array(ctx.outlen)\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xFF\n  }\n  return out\n}\n\n// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2s (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32\n  input = util.normalizeInput(input)\n\n  // do the math\n  var ctx = blake2sInit(outlen, key)\n  blake2sUpdate(ctx, input)\n  return blake2sFinal(ctx)\n}\n\n// Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2sHex (input, key, outlen) {\n  var output = blake2s(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n}\n","var b2b = require('./blake2b')\nvar b2s = require('./blake2s')\n\nmodule.exports = {\n  blake2b: b2b.blake2b,\n  blake2bHex: b2b.blake2bHex,\n  blake2bInit: b2b.blake2bInit,\n  blake2bUpdate: b2b.blake2bUpdate,\n  blake2bFinal: b2b.blake2bFinal,\n  blake2s: b2s.blake2s,\n  blake2sHex: b2s.blake2sHex,\n  blake2sInit: b2s.blake2sInit,\n  blake2sUpdate: b2s.blake2sUpdate,\n  blake2sFinal: b2s.blake2sFinal\n}\n","import { serializeHash } from '@holochain-open-dev/common';\nimport { Dictionary, Hash } from '@holochain-open-dev/core-types';\n// @ts-ignore\nimport blake from 'blakejs';\n\nfunction str2ab(str: string) {\n  var buf = new ArrayBuffer(str.length);\n  var bufView = new Uint8Array(buf);\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\n// From https://github.com/holochain/holochain/blob/dc0cb61d0603fa410ac5f024ed6ccfdfc29715b3/crates/holo_hash/src/encode.rs\nexport function hash(content: any): Hash {\n  const contentString =\n    typeof content === 'string' ? content : JSON.stringify(content);\n\n  const hashable = new Uint8Array(str2ab(contentString));\n\n  return blake.blake2b(hashable, null, 32);\n}\n\nexport const hashLocation: Dictionary<number> = {};\n\nexport function location(hash: string): number {\n  if (hashLocation[hash]) return hashLocation[hash];\n\n  const hash128: Uint8Array = blake.blake2b(hash, null, 16);\n\n  const out = [hash128[0], hash128[1], hash128[2], hash128[3]];\n\n  for (let i = 4; i < 16; i += 4) {\n    out[0] ^= hash128[i];\n    out[1] ^= hash128[i + 1];\n    out[2] ^= hash128[i + 2];\n    out[3] ^= hash128[i + 3];\n  }\n\n  const view = new DataView(new Uint8Array(out).buffer, 0);\n  return view.getUint32(0, false);\n}\n\n// We return the distance as the shortest distance between two hashes in the circle\nexport function distance(hash1: Hash, hash2: Hash): number {\n  const location1 = location(serializeHash(hash1));\n  const location2 = location(serializeHash(hash2));\n\n  return Math.min(location1 - location2, location2 - location1);\n}\n\nexport function compareBigInts(a: number, b: number): number {\n  if (a > b) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  return 0;\n}\n","import {\n  AgentPubKey,\n  AppEntryType,\n  CellId,\n  DHTOp,\n  DHTOpType,\n  Entry,\n  EntryType,\n  Hash,\n  NewEntryHeader,\n} from '@holochain-open-dev/core-types';\nimport { head } from 'lodash-es';\nimport { hash } from '../../processors/hash';\nimport { Cell } from './cell';\n\nexport function hashEntry(entry: Entry): Hash {\n  if (entry.entry_type === 'Agent') return entry.content;\n  return hash(entry.content);\n}\n\nexport function getAppEntryType(\n  entryType: EntryType\n): AppEntryType | undefined {\n  if ((entryType as { App: AppEntryType }).App)\n    return (entryType as { App: AppEntryType }).App;\n  return undefined;\n}\n\nexport function getEntryTypeString(cell: Cell, entryType: EntryType): string {\n  const appEntryType = getAppEntryType(entryType);\n\n  if (appEntryType) {\n    const dna = cell.getSimulatedDna();\n    return dna.zomes[appEntryType.zome_id].entry_defs[appEntryType.id].id;\n  }\n\n  return entryType as string;\n}\n\nexport function getDHTOpBasis(dhtOp: DHTOp): Hash {\n  switch (dhtOp.type) {\n    case DHTOpType.StoreElement:\n      return hash(dhtOp.header);\n    case DHTOpType.StoreEntry:\n      return dhtOp.header.header.content.entry_hash;\n    case DHTOpType.RegisterUpdatedContent:\n      return dhtOp.header.header.content.original_entry_address;\n    case DHTOpType.RegisterAgentActivity:\n      return dhtOp.header.header.content.author;\n    case DHTOpType.RegisterAddLink:\n      return dhtOp.header.header.content.base_address;\n    case DHTOpType.RegisterRemoveLink:\n      return dhtOp.header.header.content.base_address;\n    case DHTOpType.RegisterDeletedBy:\n      return dhtOp.header.header.content.deletes_address;\n    case DHTOpType.RegisterDeletedEntryHeader:\n      return dhtOp.header.header.content.deletes_entry_address;\n    default:\n      return (undefined as unknown) as Hash;\n  }\n}\n","import { serializeHash } from '@holochain-open-dev/common';\nimport {\n  Hash,\n  DHTOp,\n  getEntry,\n  DHTOpType,\n  HeaderType,\n  ChainStatus,\n  LinkMetaKey,\n  LinkMetaVal,\n  SysMetaVal,\n  EntryDhtStatus,\n  Header,\n} from '@holochain-open-dev/core-types';\nimport { hash } from '../../../processors/hash';\nimport {\n  ValidationLimboValue,\n  CellState,\n  IntegrationLimboValue,\n  IntegratedDhtOpsValue,\n} from '../state';\nimport { hashEntry } from '../utils';\n\nimport { getHeadersForEntry } from './get';\n\nexport const putValidationLimboValue = (\n  dhtOpHash: Hash,\n  validationLimboValue: ValidationLimboValue\n) => (state: CellState) => {\n  state.validationLimbo[serializeHash(dhtOpHash)] = validationLimboValue;\n};\n\nexport const deleteValidationLimboValue = (dhtOpHash: Hash) => (\n  state: CellState\n) => {\n  const hash = serializeHash(dhtOpHash);\n  delete state.validationLimbo[hash];\n};\n\nexport const putIntegrationLimboValue = (\n  dhtOpHash: Hash,\n  integrationLimboValue: IntegrationLimboValue\n) => (state: CellState) => {\n  state.integrationLimbo[serializeHash(dhtOpHash)] = integrationLimboValue;\n};\n\nexport const putDhtOpData = (dhtOp: DHTOp) => async (state: CellState) => {\n  const headerHash = hash(dhtOp.header);\n  state.CAS[serializeHash(headerHash)] = dhtOp.header;\n\n  const entry = getEntry(dhtOp);\n\n  if (entry) {\n    const entryHash = hashEntry(entry);\n    state.CAS[serializeHash(entryHash)] = entry;\n  }\n};\n\nexport const putDhtOpMetadata = (dhtOp: DHTOp) => (state: CellState) => {\n  const headerHash = hash(dhtOp.header);\n\n  if (dhtOp.type === DHTOpType.StoreElement) {\n    state.metadata.misc_meta[serializeHash(headerHash)] = 'StoreElement';\n  } else if (dhtOp.type === DHTOpType.StoreEntry) {\n    const entryHash = dhtOp.header.header.content.entry_hash;\n\n    if (dhtOp.header.header.content.type === HeaderType.Update) {\n      register_header_on_basis(headerHash, dhtOp.header.header.content)(state);\n      register_header_on_basis(entryHash, dhtOp.header.header.content)(state);\n    }\n\n    register_header_on_basis(entryHash, dhtOp.header.header.content)(state);\n    update_entry_dht_status(entryHash)(state);\n  } else if (dhtOp.type === DHTOpType.RegisterAgentActivity) {\n    state.metadata.misc_meta[serializeHash(headerHash)] = {\n      ChainItem: dhtOp.header.header.content.timestamp,\n    };\n\n    state.metadata.misc_meta[\n      serializeHash(dhtOp.header.header.content.author)\n    ] = {\n      ChainStatus: ChainStatus.Valid,\n    };\n  } else if (\n    dhtOp.type === DHTOpType.RegisterUpdatedContent ||\n    dhtOp.type === DHTOpType.RegisterUpdatedElement\n  ) {\n    register_header_on_basis(\n      dhtOp.header.header.content.original_header_address,\n      dhtOp.header.header.content\n    )(state);\n    register_header_on_basis(\n      dhtOp.header.header.content.original_entry_address,\n      dhtOp.header.header.content\n    )(state);\n    update_entry_dht_status(dhtOp.header.header.content.original_entry_address)(\n      state\n    );\n  } else if (\n    dhtOp.type === DHTOpType.RegisterDeletedBy ||\n    dhtOp.type === DHTOpType.RegisterDeletedEntryHeader\n  ) {\n    register_header_on_basis(\n      dhtOp.header.header.content.deletes_address,\n      dhtOp.header.header.content\n    )(state);\n    register_header_on_basis(\n      dhtOp.header.header.content.deletes_entry_address,\n      dhtOp.header.header.content\n    )(state);\n\n    update_entry_dht_status(dhtOp.header.header.content.deletes_entry_address)(\n      state\n    );\n  } else if (dhtOp.type === DHTOpType.RegisterAddLink) {\n    const key: LinkMetaKey = {\n      base: dhtOp.header.header.content.base_address,\n      header_hash: headerHash,\n      tag: dhtOp.header.header.content.tag,\n      zome_id: dhtOp.header.header.content.zome_id,\n    };\n    const value: LinkMetaVal = {\n      link_add_hash: headerHash,\n      tag: dhtOp.header.header.content.tag,\n      target: dhtOp.header.header.content.target_address,\n      timestamp: dhtOp.header.header.content.timestamp,\n      zome_id: dhtOp.header.header.content.zome_id,\n    };\n    state.metadata.link_meta.push({ key, value });\n  } else if (dhtOp.type === DHTOpType.RegisterRemoveLink) {\n    const val: SysMetaVal = {\n      DeleteLink: headerHash,\n    };\n\n    putSystemMetadata(dhtOp.header.header.content.link_add_address, val)(state);\n  }\n};\n\nconst update_entry_dht_status = (entryHash: Hash) => (state: CellState) => {\n  const headers = getHeadersForEntry(state, entryHash);\n\n  const entryIsAlive = headers.some(header => {\n    const dhtHeaders = state.metadata.system_meta[serializeHash(hash(header))];\n    return dhtHeaders\n      ? dhtHeaders.find(\n          metaVal =>\n            (metaVal as {\n              Delete: Hash;\n            }).Delete\n        )\n      : true;\n  });\n\n  state.metadata.misc_meta[serializeHash(entryHash)] = {\n    EntryStatus: entryIsAlive ? EntryDhtStatus.Live : EntryDhtStatus.Dead,\n  };\n};\n\nexport const register_header_on_basis = (basis: Hash, header: Header) => (\n  state: CellState\n) => {\n  const headerHash = hash(header);\n  let value: SysMetaVal | undefined;\n  if (header.type === HeaderType.Create) {\n    value = { NewEntry: headerHash };\n  } else if (header.type === HeaderType.Update) {\n    value = { Update: headerHash };\n  } else if (header.type === HeaderType.Delete) {\n    value = { Delete: headerHash };\n  }\n\n  if (value) {\n    putSystemMetadata(basis, value)(state);\n  }\n};\n\nexport const putSystemMetadata = (basis: Hash, value: SysMetaVal) => (\n  state: CellState\n) => {\n  const basisStr = serializeHash(basis);\n  if (!state.metadata.system_meta[basisStr]) {\n    state.metadata.system_meta[basisStr] = [];\n  }\n\n  state.metadata.system_meta[basisStr].push(value);\n};\n\nexport const putDhtOpToIntegrated = (\n  dhtOpHash: Hash,\n  integratedValue: IntegratedDhtOpsValue\n) => (state: CellState) => {\n  state.integratedDHTOps[serializeHash(dhtOpHash)] = integratedValue;\n};\n","import { serializeHash } from '@holochain-open-dev/common';\nimport { Hash } from '@holochain-open-dev/core-types';\nimport { CellState } from '../state';\n\n/**\n * Returns the header hashes which don't have their DHTOps in the authoredDHTOps DB\n */\nexport function getNewHeaders(state: CellState): Array<Hash> {\n  return state.sourceChain.filter(\n    headerHash =>\n      !Object.keys(state.authoredDHTOps).includes(serializeHash(headerHash))\n  );\n}\n","import { CellState } from '../state';\nimport { Element } from '@holochain-open-dev/core-types';\nimport { serializeHash } from '@holochain-open-dev/common';\nimport { hashEntry } from '../utils';\n\nexport const putElement = (element: Element) => (state: CellState): void => {\n  // Put header in CAS\n  const headerHash = element.signed_header.header.hash;\n  state.CAS[serializeHash(headerHash)] = element.signed_header;\n\n  // Put entry in CAS if it exist\n  if (element.entry) {\n    const entryHash = hashEntry(element.entry);\n    state.CAS[serializeHash(entryHash)] = element.entry;\n  }\n\n  state.sourceChain.unshift(headerHash);\n};\n","import { serializeHash } from '@holochain-open-dev/common';\nimport {\n  Hash,\n  AgentPubKey,\n  Dna,\n  Header,\n  HeaderType,\n  CellId,\n  Element,\n  Dictionary,\n  DHTOp,\n  SignedHeaderHashed,\n} from '@holochain-open-dev/core-types';\nimport { CellState } from '../state';\n\nexport function getTipOfChain(cellState: CellState): Hash {\n  return cellState.sourceChain[0];\n}\n\nexport function getAuthor(cellState: CellState): AgentPubKey {\n  return getHeaderAt(cellState, 0).header.content.author;\n}\n\nexport function getDnaHash(state: CellState): Hash {\n  const firstHeaderHash = state.sourceChain[state.sourceChain.length - 1];\n\n  const dna: SignedHeaderHashed<Dna> =\n    state.CAS[serializeHash(firstHeaderHash)];\n  return dna.header.content.hash;\n}\n\nexport function getHeaderAt(\n  cellState: CellState,\n  index: number\n): SignedHeaderHashed {\n  const headerHash = cellState.sourceChain[index];\n  return cellState.CAS[serializeHash(headerHash)];\n}\n\nexport function getNextHeaderSeq(cellState: CellState): number {\n  return cellState.sourceChain.length;\n}\n\nexport function getElement(state: CellState, headerHash: Hash): Element {\n  const signed_header: SignedHeaderHashed =\n    state.CAS[serializeHash(headerHash)];\n\n  let entry;\n  if (\n    signed_header.header.content.type == HeaderType.Create ||\n    signed_header.header.content.type == HeaderType.Update\n  ) {\n    entry = state.CAS[serializeHash(signed_header.header.content.entry_hash)];\n  }\n  return { signed_header, entry };\n}\n\nexport function getCellId(state: CellState): CellId {\n  const author = getAuthor(state);\n  const dna = getDnaHash(state);\n  return [dna, author];\n}\n\nexport function getNonPublishedDhtOps(state: CellState): Dictionary<DHTOp> {\n  const nonPublishedDhtOps: Dictionary<DHTOp> = {};\n  for (const dhtOpHash of Object.keys(state.authoredDHTOps)) {\n    const authoredValue = state.authoredDHTOps[dhtOpHash];\n    if (authoredValue.last_publish_time === undefined) {\n      nonPublishedDhtOps[dhtOpHash] = authoredValue.op;\n    }\n  }\n\n  return nonPublishedDhtOps;\n}\n","import { now } from '@holochain-open-dev/common';\nimport {\n  Hash,\n  AgentPubKey,\n  Dna,\n  HeaderType,\n  AgentValidationPkg,\n  Entry,\n  EntryType,\n  Create,\n  Update,\n  SignedHeaderHashed,\n  Header,\n  CreateLink,\n} from '@holochain-open-dev/core-types';\nimport { hash } from '../../../processors/hash';\nimport { CellState } from '../state';\nimport { hashEntry } from '../utils';\nimport { getAuthor, getNextHeaderSeq, getTipOfChain } from './utils';\n\nexport function buildShh(header: Header): SignedHeaderHashed {\n  return {\n    header: {\n      content: header,\n      hash: hash(header),\n    },\n    signature: Uint8Array.from([]),\n  };\n}\n\nexport function buildDna(dnaHash: Hash, agentId: AgentPubKey): Dna {\n  const dna: Dna = {\n    author: agentId,\n    hash: dnaHash,\n    timestamp: now(),\n    type: HeaderType.Dna,\n  };\n\n  return dna;\n}\n\nexport function buildAgentValidationPkg(\n  state: CellState,\n  membrane_proof: any\n): AgentValidationPkg {\n  const pkg: AgentValidationPkg = {\n    ...buildCommon(state),\n    membrane_proof,\n    type: HeaderType.AgentValidationPkg,\n  };\n  return pkg;\n}\n\nexport function buildCreate(\n  state: CellState,\n  entry: Entry,\n  entry_type: EntryType\n): Create {\n  const entry_hash = hashEntry(entry);\n\n  const create: Create = {\n    ...buildCommon(state),\n    entry_hash,\n    entry_type,\n    type: HeaderType.Create,\n  };\n  return create;\n}\n\nexport function buildCreateLink(\n  state: CellState,\n  zome_id: number,\n  base: Hash,\n  target: Hash,\n  tag: any\n): CreateLink {\n  const create_link: CreateLink = {\n    ...buildCommon(state),\n    base_address: base,\n    target_address: target,\n    tag,\n    zome_id,\n    type: HeaderType.CreateLink,\n  };\n  return create_link;\n}\n\nexport function buildUpdate(\n  state: CellState,\n  entry: Entry,\n  entry_type: EntryType,\n  original_entry_address: Hash,\n  original_header_address: Hash\n): Update {\n  const entry_hash = hashEntry(entry);\n\n  const update: Update = {\n    ...buildCommon(state),\n    entry_hash,\n    entry_type,\n    original_entry_address,\n    original_header_address,\n\n    type: HeaderType.Update,\n  };\n  return update;\n}\n\n/** Helpers */\n\nfunction buildCommon(state: CellState) {\n  const author = getAuthor(state);\n  const header_seq = getNextHeaderSeq(state);\n  const prev_header = getTipOfChain(state);\n  const timestamp = now();\n\n  return {\n    author,\n    header_seq,\n    prev_header,\n    timestamp,\n  };\n}\n","import {\n  AgentPubKey,\n  DHTOp,\n  Dictionary,\n  Hash,\n  Metadata,\n} from '@holochain-open-dev/core-types';\n\nexport interface CellState {\n  sourceChain: Array<Hash>;\n  CAS: Dictionary<any>;\n  metadata: Metadata; // For the moment only DHT shard\n  integratedDHTOps: Dictionary<IntegratedDhtOpsValue>; // Key is the hash of the DHT op\n  authoredDHTOps: Dictionary<AuthoredDhtOpsValue>; // Key is the hash of the DHT op\n  integrationLimbo: Dictionary<IntegrationLimboValue>; // Key is the hash of the DHT op\n  validationLimbo: Dictionary<ValidationLimboValue>; // Key is the hash of the DHT op\n}\n\nexport interface IntegratedDhtOpsValue {\n  op: DHTOp;\n  validation_status: ValidationStatus;\n  when_integrated: number;\n}\n\nexport interface IntegrationLimboValue {\n  op: DHTOp;\n  validation_status: ValidationStatus;\n}\n\nexport enum ValidationStatus {\n  Valid,\n  Rejected,\n  Abandoned,\n}\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/state/dht_op_integration.rs\nexport interface AuthoredDhtOpsValue {\n  op: DHTOp;\n  receipt_count: number;\n  last_publish_time: number | undefined;\n}\n\nexport enum ValidationLimboStatus {\n  Pending,\n  AwaitingSysDeps,\n  SysValidated,\n  AwaitingAppDeps,\n}\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/state/validation_db.rs#L24\nexport interface ValidationLimboValue {\n  status: ValidationLimboStatus;\n  op: DHTOp;\n  basis: Hash;\n  time_added: number;\n  last_try: number | undefined;\n  num_tries: number;\n  from_agent: AgentPubKey | undefined;\n}\n","import { deserializeHash } from '@holochain-open-dev/common';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport { IntegratedDhtOpsValue } from '../state';\nimport { pullAllIntegrationLimboDhtOps } from '../dht/get';\nimport {\n  putDhtOpData,\n  putDhtOpMetadata,\n  putDhtOpToIntegrated,\n} from '../dht/put';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/integrate_dht_ops_workflow.rs\nexport const integrate_dht_ops = async (cell: Cell): Promise<void> => {\n  const opsToIntegrate = pullAllIntegrationLimboDhtOps(cell.state);\n\n  for (const dhtOpHash of Object.keys(opsToIntegrate)) {\n    const integrationLimboValue = opsToIntegrate[dhtOpHash];\n\n    const dhtOp = integrationLimboValue.op;\n\n    await putDhtOpData(dhtOp)(cell.state);\n    putDhtOpMetadata(dhtOp)(cell.state);\n\n    const value: IntegratedDhtOpsValue = {\n      op: dhtOp,\n      validation_status: integrationLimboValue.validation_status,\n      when_integrated: Date.now(),\n    };\n\n    putDhtOpToIntegrated(deserializeHash(dhtOpHash), value)(cell.state);\n  }\n};\n\nexport function integrate_dht_ops_task(cell: Cell): Task<void> {\n  return {\n    name: 'Integrate DHT Ops',\n    description: 'Integration of the validated DHTOp in our DHT shard',\n    task: () => integrate_dht_ops(cell),\n  };\n}\n","import { deserializeHash } from '@holochain-open-dev/common';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport {\n  ValidationLimboStatus,\n  IntegrationLimboValue,\n  ValidationStatus,\n} from '../state';\nimport { getValidationLimboDhtOps } from '../dht/get';\nimport {\n  deleteValidationLimboValue,\n  putIntegrationLimboValue,\n} from '../dht/put';\nimport { integrate_dht_ops_task } from './integrate_dht_ops';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/app_validation_workflow.rs\nexport const app_validation = async (cell: Cell): Promise<void> => {\n  const pendingDhtOps = getValidationLimboDhtOps(\n    cell.state,\n    ValidationLimboStatus.SysValidated\n  );\n\n  // TODO: actually validate\n  for (const dhtOpHashStr of Object.keys(pendingDhtOps)) {\n    const dhtOpHash = deserializeHash(dhtOpHashStr);\n    deleteValidationLimboValue(dhtOpHash)(cell.state);\n\n    const validationLimboValue = pendingDhtOps[dhtOpHashStr];\n\n    const value: IntegrationLimboValue = {\n      op: validationLimboValue.op,\n      validation_status: ValidationStatus.Valid,\n    };\n\n    putIntegrationLimboValue(dhtOpHash, value)(cell.state);\n  }\n\n  cell.triggerWorkflow(integrate_dht_ops_task(cell));\n};\n\nexport function app_validation_task(cell: Cell): Task<void> {\n  return {\n    name: 'App Validation of the DHT Op',\n    description: 'Running of the zome appropriate zome hook',\n    task: () => app_validation(cell),\n  };\n}\n","import {\n  Entry,\n  EntryType,\n  Element,\n  Hash,\n} from '@holochain-open-dev/core-types';\nimport { Cell } from '../../../cell';\nimport { buildCreate, buildShh } from '../../../cell/source-chain/builder-headers';\nimport { putElement } from '../../../cell/source-chain/put';\nimport { HostFn } from '../../host-fn';\n\nexport type CreateEntry = (args: {\n  content: any;\n  entry_def_id: string;\n}) => Promise<Hash>;\n\n// Creates a new Create header and its entry in the source chain\nexport const create_entry: HostFn<CreateEntry> = (\n  zome_index: number,\n  cell: Cell\n): CreateEntry => async (args: {\n  content: any;\n  entry_def_id: string;\n}): Promise<Hash> => {\n  const entry: Entry = { entry_type: 'App', content: args.content };\n  const dna = cell.getSimulatedDna();\n\n  const entryDefIndex = dna.zomes[zome_index].entry_defs.findIndex(\n    entry_def => entry_def.id === args.entry_def_id\n  );\n  if (entryDefIndex < 0) {\n    throw new Error(\n      `Given entry def id ${args.entry_def_id} does not exist in this zome`\n    );\n  }\n\n  const entry_type = {\n    App: {\n      id: entryDefIndex,\n      zome_id: zome_index,\n      visibility: dna.zomes[zome_index].entry_defs[entryDefIndex].visibility,\n    },\n  };\n\n  const create = buildCreate(cell.state, entry, entry_type);\n\n  const element: Element = {\n    signed_header: buildShh(create),\n    entry,\n  };\n  putElement(element)(cell.state);\n\n  return element.signed_header.header.hash;\n};\n","import {\n  Element,\n  Hash,\n} from '@holochain-open-dev/core-types';\nimport { Cell } from '../../../cell';\nimport {\n  buildCreateLink,\n  buildShh,\n} from '../../../cell/source-chain/builder-headers';\nimport { putElement } from '../../../cell/source-chain/put';\nimport { HostFn } from '../../host-fn';\n\nexport type CreateLink = (args: {\n  base: Hash;\n  target: Hash;\n  tag: any;\n}) => Promise<Hash>;\n\n// Creates a new CreateLink header in the source chain\nexport const create_link: HostFn<CreateLink> = (\n  zome_id: number,\n  cell: Cell\n): CreateLink => async (args): Promise<Hash> => {\n  const createLink = buildCreateLink(\n    cell.state,\n    zome_id,\n    args.base,\n    args.target,\n    args.tag\n  );\n\n  const element: Element = {\n    signed_header: buildShh(createLink),\n    entry: undefined,\n  };\n  putElement(element)(cell.state);\n\n  return element.signed_header.header.hash;\n};\n","import { Entry, Hash } from '@holochain-open-dev/core-types';\nimport { Cell, hashEntry } from '../../cell';\nimport { HostFn } from '../host-fn';\n\nexport type HashEntry = (args: { content: any }) => Promise<Hash>;\n\n// Creates a new Create header and its entry in the source chain\nexport const hash_entry: HostFn<HashEntry> = (\n  zome_index: number,\n  cell: Cell\n): HashEntry => async (args): Promise<Hash> => {\n  const entry: Entry = { entry_type: 'App', content: args.content };\n  return hashEntry(entry);\n};\n","import { SimulatedZomeFunctionContext } from './context';\n\nasync function ensure(\n  path: string,\n  hdk: SimulatedZomeFunctionContext\n): Promise<void> {\n  const headerHash = await hdk.create_entry({\n    content: path,\n    entry_def_id: 'path',\n  });\n\n  const components = path.split('.');\n\n  if (components.length > 1) {\n    components.splice(components.length - 1, 1);\n    const parent = components.join('.');\n\n    await ensure(parent, hdk);\n\n    const pathHash = await hdk.hash_entry({ content: path });\n    const parentHash = await hdk.hash_entry({ content: parent });\n\n    await hdk.create_link({ base: parentHash, target: pathHash, tag: path });\n  }\n}\n\nexport interface Path {\n  ensure: (path: string, hdk: SimulatedZomeFunctionContext) => Promise<void>;\n}\n\nexport const path = {\n  ensure,\n};\n","import { Cell } from '../cell';\nimport { CreateEntry, create_entry } from './host-fn/actions/create-entry';\nimport { CreateLink, create_link } from './host-fn/actions/create-link';\nimport { HashEntry, hash_entry } from './host-fn/hash-entry';\nimport { path, Path } from './path';\n\nexport interface SimulatedZomeFunctionContext {\n  create_entry: CreateEntry;\n  hash_entry: HashEntry;\n  create_link: CreateLink;\n  path: Path;\n}\n\nexport function buildZomeFunctionContext(\n  zome_index: number,\n  cell: Cell\n): SimulatedZomeFunctionContext {\n  return {\n    create_entry: create_entry(zome_index, cell),\n    hash_entry: hash_entry(zome_index, cell),\n    create_link: create_link(zome_index, cell),\n    path,\n  };\n}\n","import { deserializeHash, serializeHash } from '@holochain-open-dev/common';\nimport { DHTOp, Dictionary } from '@holochain-open-dev/core-types';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport { getNonPublishedDhtOps } from '../source-chain/utils';\nimport { getDHTOpBasis } from '../utils';\n\nexport function publish_dht_ops_task(cell: Cell): Task<void> {\n  return {\n    name: 'Publish DHT Ops',\n    description:\n      'Read the elements in the authored DHT Ops that have not been published and publish them',\n    task: () => publish_dht_ops(cell),\n  };\n}\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/publish_dht_ops_workflow.rs\nexport const publish_dht_ops = async (cell: Cell): Promise<void> => {\n  const dhtOps = getNonPublishedDhtOps(cell.state);\n\n  const dhtOpsByBasis: Dictionary<Dictionary<DHTOp>> = {};\n\n  for (const dhtOpHash of Object.keys(dhtOps)) {\n    const dhtOp = dhtOps[dhtOpHash];\n    const basis = serializeHash(getDHTOpBasis(dhtOp));\n\n    if (!dhtOpsByBasis[basis]) dhtOpsByBasis[basis] = {};\n\n    dhtOpsByBasis[basis][dhtOpHash] = dhtOp;\n  }\n\n  const promises = Object.entries(dhtOpsByBasis).map(\n    async ([basis, dhtOps]) => {\n      // Publish the operations\n      await cell.p2p.publish(deserializeHash(basis), dhtOps);\n\n      for (const dhtOpHash of Object.keys(dhtOps)) {\n        cell.state.authoredDHTOps[dhtOpHash].last_publish_time = Date.now();\n      }\n    }\n  );\n\n  await Promise.all(promises);\n};\n","import { serializeHash } from '@holochain-open-dev/common';\nimport { elementToDHTOps } from '@holochain-open-dev/core-types';\nimport { Task } from '../../../executor/executor';\nimport { hash } from '../../../processors/hash';\nimport { Cell } from '../../cell';\nimport { getNewHeaders } from '../source-chain/get';\nimport { getElement } from '../source-chain/utils';\nimport { publish_dht_ops_task } from './publish_dht_ops';\n\nexport function produce_dht_ops_task(cell: Cell): Task<void> {\n  return {\n    name: 'Produce DHT Ops',\n    description:\n      'Read the new elements in the source chain and produce their appropriate DHT Ops',\n    task: () => produce_dht_ops(cell),\n  };\n}\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/produce_dht_ops_workflow.rs\nexport const produce_dht_ops = async (cell: Cell): Promise<void> => {\n  const newHeaderHashes = getNewHeaders(cell.state);\n\n  for (const newHeaderHash of newHeaderHashes) {\n    const element = getElement(cell.state, newHeaderHash);\n    const dhtOps = elementToDHTOps(element);\n\n    for (const dhtOp of dhtOps) {\n      const dhtOpHash = hash(dhtOp);\n      const dhtOpValue = {\n        op: dhtOp,\n        last_publish_time: undefined,\n        receipt_count: 0,\n      };\n\n      cell.state.authoredDHTOps[serializeHash(dhtOpHash)] = dhtOpValue;\n    }\n  }\n\n  cell.triggerWorkflow(publish_dht_ops_task(cell));\n};\n","import { Cell } from '../../cell';\nimport { buildZomeFunctionContext } from '../../hdk/context';\nimport { getTipOfChain } from '../source-chain/utils';\nimport { produce_dht_ops_task } from './produce_dht_ops';\n\n/**\n * Calls the zome function of the cell DNA\n * This can only be called in the simulated mode: we can assume that cell.simulatedDna exists\n */\nexport const callZomeFn = (\n  zomeName: string,\n  fnName: string,\n  payload: any,\n  cap: string\n) => async (cell: Cell): Promise<any> => {\n  const currentHeader = getTipOfChain(cell.state);\n\n  const dna = cell.getSimulatedDna();\n  if (!dna)\n    throw new Error(\n      `Trying to do a simulated call to a cell that is not simulated`\n    );\n\n  const zomeIndex = dna.zomes.findIndex(zome => zome.name === zomeName);\n  if (zomeIndex < 0)\n    throw new Error(`There is no zome with the name ${zomeName} in this DNA`);\n\n  if (!dna.zomes[zomeIndex].zome_functions[fnName])\n    throw new Error(\n      `There is function with the name ${fnName} in this zome with the name ${zomeName}`\n    );\n\n  const context = buildZomeFunctionContext(zomeIndex, cell);\n\n  const result = dna.zomes[zomeIndex].zome_functions[fnName].call(context)(payload);\n\n  if (getTipOfChain(cell.state) != currentHeader) {\n    // Do validation\n\n    // Trigger production of DHT Ops\n    cell.triggerWorkflow(produce_dht_ops_task(cell));\n  }\n\n  return result;\n};\n","import { AgentPubKey, Hash, Entry } from '@holochain-open-dev/core-types';\nimport { Cell } from '../../cell';\nimport {\n  buildAgentValidationPkg,\n  buildCreate,\n  buildDna,\n  buildShh,\n} from '../source-chain/builder-headers';\nimport { putElement } from '../source-chain/put';\nimport { produce_dht_ops_task } from './produce_dht_ops';\n\nexport const genesis = (\n  agentId: AgentPubKey,\n  dnaHash: Hash,\n  membrane_proof: any\n) => async (cell: Cell): Promise<void> => {\n  const dna = buildDna(dnaHash, agentId);\n  putElement({ signed_header: buildShh(dna), entry: undefined })(cell.state);\n\n  const pkg = buildAgentValidationPkg(cell.state, membrane_proof);\n  putElement({ signed_header: buildShh(pkg), entry: undefined })(cell.state);\n\n  const entry: Entry = {\n    content: agentId,\n    entry_type: 'Agent',\n  };\n  const create_agent_pub_key_entry = buildCreate(cell.state, entry, 'Agent');\n  putElement({\n    signed_header: buildShh(create_agent_pub_key_entry),\n    entry: entry,\n  })(cell.state);\n\n  cell.triggerWorkflow(produce_dht_ops_task(cell));\n};\n","import { deserializeHash } from '@holochain-open-dev/common';\nimport { Task } from '../../../executor/executor';\nimport { Cell } from '../../cell';\nimport { ValidationLimboStatus } from '../state';\nimport { getValidationLimboDhtOps } from '../dht/get';\nimport { putValidationLimboValue } from '../dht/put';\nimport { app_validation_task } from './app_validation';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/sys_validation_workflow.rs\nexport const sys_validation = async (cell: Cell): Promise<void> => {\n  const pendingDhtOps = getValidationLimboDhtOps(\n    cell.state,\n    ValidationLimboStatus.Pending\n  );\n\n  // TODO: actually validate\n  for (const dhtOpHash of Object.keys(pendingDhtOps)) {\n    const limboValue = pendingDhtOps[dhtOpHash];\n\n    limboValue.status = ValidationLimboStatus.SysValidated;\n\n    putValidationLimboValue(deserializeHash(dhtOpHash), limboValue);\n  }\n\n  cell.triggerWorkflow(app_validation_task(cell));\n};\n\nexport function sys_validation_task(cell: Cell): Task<void> {\n  return {\n    name: 'System Validation of the DHT Op',\n    description: 'Subconscious checks of data integrity',\n    task: () => sys_validation(cell),\n  };\n}\n","import { deserializeHash } from '@holochain-open-dev/common';\nimport {\n  Hash,\n  Dictionary,\n  DHTOp,\n  AgentPubKey,\n} from '@holochain-open-dev/core-types';\nimport { Cell } from '../../cell';\nimport { ValidationLimboValue, ValidationLimboStatus } from '../state';\nimport { putValidationLimboValue } from '../dht/put';\nimport { sys_validation_task } from './sys_validation';\n\n// From https://github.com/holochain/holochain/blob/develop/crates/holochain/src/core/workflow/incoming_dht_ops_workflow.rs\nexport const incoming_dht_ops = (\n  basis: Hash,\n  dhtOps: Dictionary<DHTOp>,\n  from_agent: AgentPubKey | undefined\n) => async (cell: Cell): Promise<void> => {\n  for (const dhtOpHash of Object.keys(dhtOps)) {\n    const dhtOp = dhtOps[dhtOpHash];\n\n    const validationLimboValue: ValidationLimboValue = {\n      basis,\n      from_agent,\n      last_try: undefined,\n      num_tries: 0,\n      op: dhtOp,\n      status: ValidationLimboStatus.Pending,\n      time_added: Date.now(),\n    };\n\n    putValidationLimboValue(deserializeHash(dhtOpHash), validationLimboValue)(cell.state);\n  }\n\n  cell.triggerWorkflow(sys_validation_task(cell));\n};\n","import { Executor, Task } from './executor';\n\nexport class ImmediateExecutor implements Executor {\n  async execute<T>(task: Task<T>): Promise<T> {\n    const result = await task.task();\n    \n    return result;\n  }\n}\n","import { Observable, Subject } from 'rxjs';\nimport {\n  CellId,\n  AgentPubKey,\n  Hash,\n  Dictionary,\n  DHTOp,\n} from '@holochain-open-dev/core-types';\nimport { Conductor } from '../conductor';\nimport { genesis } from './workflows/genesis';\nimport { Executor, Task } from '../../executor/executor';\nimport { ImmediateExecutor } from '../../executor/immediate-executor';\nimport { callZomeFn } from './workflows/call_zome_fn';\nimport { getCellId, getDnaHash } from './source-chain/utils';\nimport { P2pCell } from '../network/p2p-cell';\nimport { incoming_dht_ops } from './workflows/incoming_dht_ops';\nimport { CellState } from './state';\nimport { serializeHash } from '@holochain-open-dev/common';\n\nexport type CellSignal = 'after-workflow-executed' | 'before-workflow-executed';\nexport type CellSignalListener = (payload: any) => void;\n\nexport class Cell {\n  executor: Executor = new ImmediateExecutor();\n\n  #pendingWorkflows: Array<Task<any>> = [];\n\n  #signals = {\n    'after-workflow-executed': new Subject<Task<any>>(),\n    'before-workflow-executed': new Subject<Task<any>>(),\n  };\n\n  constructor(\n    public state: CellState,\n    public conductor: Conductor,\n    public p2p: P2pCell\n  ) {}\n\n  get cellId(): CellId {\n    return getCellId(this.state);\n  }\n\n  get agentPubKey(): AgentPubKey {\n    return this.cellId[1];\n  }\n\n  get dnaHash(): Hash {\n    return this.cellId[0];\n  }\n\n  get signals() {\n    return this.#signals;\n  }\n\n  getSimulatedDna() {\n    return this.conductor.registeredDnas[serializeHash(this.dnaHash)];\n  }\n\n  static async create(\n    conductor: Conductor,\n    cellId: CellId,\n    membrane_proof: any\n  ): Promise<Cell> {\n    const newCellState: CellState = {\n      CAS: {},\n      integrationLimbo: {},\n      metadata: {\n        link_meta: [],\n        misc_meta: {},\n        system_meta: {},\n      },\n      validationLimbo: {},\n      integratedDHTOps: {},\n      authoredDHTOps: {},\n      sourceChain: [],\n    };\n\n    const p2p = conductor.network.createP2pCell(cellId);\n\n    const cell = new Cell(newCellState, conductor, p2p);\n\n    await cell.executor.execute({\n      name: 'Genesis Workflow',\n      description: 'Initialize the cell with all the needed databases',\n      task: () => genesis(cellId[1], cellId[0], membrane_proof)(cell),\n    });\n\n    return cell;\n  }\n\n  getState(): CellState {\n    return this.state;\n  }\n\n  triggerWorkflow(workflow: Task<any>) {\n    this.#pendingWorkflows.push(workflow);\n\n    setTimeout(() => this._runPendingWorkflows());\n  }\n\n  async _runPendingWorkflows() {\n    const workflowsToRun = this.#pendingWorkflows;\n    this.#pendingWorkflows = [];\n\n    const promises = workflowsToRun.map(w => {\n      this.#signals['before-workflow-executed'].next(w);\n      this.executor\n        .execute(w)\n        .then(() => this.#signals['after-workflow-executed'].next(w));\n    });\n\n    await Promise.all(promises);\n  }\n\n  /** Workflows */\n\n  callZomeFn(args: {\n    zome: string;\n    fnName: string;\n    payload: any;\n    cap: string;\n  }): Promise<any> {\n    return this.executor.execute({\n      name: 'Call Zome Function Workflow',\n      description: `Zome: ${args.zome}, Function name: ${args.fnName}`,\n      task: () =>\n        callZomeFn(args.zome, args.fnName, args.payload, args.cap)(this),\n    });\n  }\n\n  /** Network handlers */\n  // https://github.com/holochain/holochain/blob/develop/crates/holochain/src/conductor/cell.rs#L429\n  public handle_publish(\n    from_agent: AgentPubKey,\n    dht_hash: Hash, // The basis for the DHTOps\n    ops: Dictionary<DHTOp>\n  ): Promise<void> {\n    return incoming_dht_ops(dht_hash, ops, from_agent)(this);\n  }\n}\n","import {\n  AgentPubKey,\n  CellId,\n  DHTOp,\n  Dictionary,\n  Hash,\n} from '@holochain-open-dev/core-types';\nimport { compareBigInts, distance } from '../../processors/hash';\nimport { Network, NetworkMessage } from './network';\n\nexport type P2pCellState = {\n  peers: Hash[];\n  redundancyFactor: number;\n};\n\n// From: https://github.com/holochain/holochain/blob/develop/crates/holochain_p2p/src/types/actor.rs\nexport class P2pCell {\n  peers: Hash[];\n\n  redundancyFactor!: number;\n\n  constructor(\n    state: P2pCellState,\n    protected cellId: CellId,\n    protected network: Network\n  ) {\n    this.peers = state.peers;\n  }\n\n  getState(): P2pCellState {\n    return {\n      peers: this.peers,\n      redundancyFactor: this.redundancyFactor,\n    };\n  }\n\n  async join(dnaHash: Hash, agent_pub_key: AgentPubKey): Promise<void> {}\n\n  async leave(dnaHash: Hash, agent_pub_key: AgentPubKey): Promise<void> {}\n\n  async publish(dht_hash: Hash, ops: Dictionary<DHTOp>): Promise<void> {\n    const neighbors = this._getClosestNeighbors(\n      dht_hash,\n      this.redundancyFactor\n    );\n\n    const promises = neighbors.map(neighbor =>\n      this._sendMessage(neighbor, cell =>\n        cell.handle_publish(this.cellId[1], dht_hash, ops)\n      )\n    );\n\n    await Promise.all(promises);\n  }\n\n  async get(\n    dna_hash: Hash,\n    from_agent: AgentPubKey,\n    dht_hash: Hash,\n    _options: any // TODO: complete?\n  ): Promise<Element | undefined> {\n    return undefined;\n  }\n\n  public getNeighbors(): Array<AgentPubKey> {\n    return this.peers;\n  }\n\n  private _getClosestNeighbors(\n    basisHash: Hash,\n    neighborCount: number\n  ): Array<AgentPubKey> {\n    const sortedPeers = [...this.peers, this.cellId[1]].sort(\n      (agentA: Hash, agentB: Hash) => {\n        const distanceA = distance(basisHash, agentA);\n        const distanceB = distance(basisHash, agentB);\n        return compareBigInts(distanceA, distanceB);\n      }\n    );\n\n    return sortedPeers.slice(0, neighborCount);\n  }\n\n  private _sendMessage<T>(\n    toAgent: AgentPubKey,\n    message: NetworkMessage<T>\n  ): Promise<T> {\n    return this.network.sendMessage(\n      this.cellId[0],\n      this.cellId[1],\n      toAgent,\n      message\n    );\n  }\n}\n","import { deserializeHash, serializeHash } from '@holochain-open-dev/common';\nimport { CellId, Dictionary, Hash } from '@holochain-open-dev/core-types';\nimport { isEqual } from 'lodash-es';\nimport { Cell } from '../cell';\nimport { Conductor } from '../conductor';\nimport { P2pCell, P2pCellState } from '../network/p2p-cell';\n\nexport interface NetworkState {\n  p2pCellsState: Array<{ id: CellId; state: P2pCellState }>; // P2pCellState by dna hash\n}\n\nexport class Network {\n  // P2pCells contained in this conductor\n  p2pCells: Array<{ id: CellId; p2pCell: P2pCell }>;\n\n  // Cell connection segmentated by [dna][agent_pub_key]\n  peerCells: Dictionary<Dictionary<Cell>>;\n\n  constructor(state: NetworkState, public conductor: Conductor) {\n    this.p2pCells = state.p2pCellsState.map(s => ({\n      id: s.id,\n      p2pCell: new P2pCell(s.state, s.id, this),\n    }));\n    this.peerCells = {};\n  }\n\n  getState(): NetworkState {\n    return {\n      p2pCellsState: this.p2pCells.map(c => ({\n        id: c.id,\n        state: c.p2pCell.getState(),\n      })),\n    };\n  }\n\n  // TODO: change this to simulate networking if necessary\n  connectWith(conductor: Conductor) {\n    for (const myCell of this.p2pCells) {\n      const cellDna = serializeHash(myCell.id[0]);\n      for (const cell of conductor.cells) {\n        if (serializeHash(cell.id[0]) === cellDna) {\n          if (!this.peerCells[cellDna]) this.peerCells[cellDna] = {};\n          this.peerCells[cellDna][serializeHash(cell.id[1])] = cell.cell;\n\n          myCell.p2pCell.peers.push(cell.id[1]);\n        }\n      }\n    }\n  }\n\n  createP2pCell(cellId: CellId): P2pCell {\n    const peersOfTheSameDna = this.peerCells[serializeHash(cellId[0])];\n    const peersAlreadyKnown = peersOfTheSameDna\n      ? Object.keys(peersOfTheSameDna).map(deserializeHash)\n      : [];\n\n    const state: P2pCellState = {\n      peers: peersAlreadyKnown,\n      redundancyFactor: 3,\n    };\n\n    const p2pCell = new P2pCell(state, cellId, this);\n\n    this.p2pCells.push({ id: cellId, p2pCell });\n\n    return p2pCell;\n  }\n\n  public sendMessage<T>(\n    dna: Hash,\n    fromAgent: Hash,\n    toAgent: Hash,\n    message: NetworkMessage<T>\n  ): Promise<T> {\n    const localCell = this.conductor.cells.find(\n      cell => isEqual(cell.id[0], dna) && isEqual(cell.id[1], toAgent)\n    );\n\n    if (localCell) return message(localCell.cell);\n\n    return message(this.peerCells[serializeHash(dna)][serializeHash(toAgent)]);\n  }\n}\n\nexport type NetworkMessage<T> = (cell: Cell) => Promise<T>;\n","import { CellId, Dictionary, Hash } from '@holochain-open-dev/core-types';\nimport { serializeHash } from '@holochain-open-dev/common';\nimport { Cell } from '../core/cell';\nimport { hash } from '../processors/hash';\nimport { Network, NetworkState } from './network/network';\n\nimport { SimulatedDna, SimulatedDnaTemplate } from '../dnas/simulated-dna';\nimport { CellState } from './cell/state';\n\nexport interface ConductorState {\n  cellsState: Array<{ id: CellId; state: CellState }>;\n  networkState: NetworkState;\n  registeredTemplates: Dictionary<SimulatedDnaTemplate>;\n  registeredDnas: Dictionary<SimulatedDna>;\n}\n\nexport class Conductor {\n  readonly cells: Array<{ id: CellId; cell: Cell }>;\n  registeredTemplates!: Dictionary<SimulatedDnaTemplate>;\n  registeredDnas!: Dictionary<SimulatedDna>;\n\n  network: Network;\n\n  constructor(state: ConductorState) {\n    this.network = new Network(state.networkState, this);\n    this.cells = state.cellsState.map(({ id, state }) => ({\n      id,\n      cell: new Cell(state, this, this.network.createP2pCell(id)),\n    }));\n    this.registeredDnas = state.registeredDnas;\n    this.registeredTemplates = state.registeredTemplates;\n  }\n\n  static async create(): Promise<Conductor> {\n    const state: ConductorState = {\n      cellsState: [],\n      networkState: {\n        p2pCellsState: [],\n      },\n      registeredDnas: {},\n      registeredTemplates: {},\n    };\n\n    return new Conductor(state);\n  }\n\n  getState(): ConductorState {\n    return {\n      networkState: this.network.getState(),\n      cellsState: this.cells.map(c => ({\n        id: c.id,\n        state: c.cell.getState(),\n      })),\n      registeredDnas: this.registeredDnas,\n      registeredTemplates: this.registeredTemplates,\n    };\n  }\n\n  getCells(dnaHash: Hash): Cell[] {\n    const dnaHashStr = serializeHash(dnaHash);\n    return this.cells\n      .filter(cell => serializeHash(cell.id[1]) === dnaHashStr)\n      .map(c => c.cell);\n  }\n\n  async registerDna(dna_template: SimulatedDnaTemplate): Promise<Hash> {\n    const templateHash = hash(dna_template);\n\n    this.registeredTemplates[serializeHash(templateHash)] = dna_template;\n    return templateHash;\n  }\n\n  async installApp(\n    dna_hash: Hash,\n    membrane_proof: any,\n    properties: any,\n    uuid: string\n  ): Promise<Cell> {\n    const rand = `${Math.random().toString()}/${Date.now()}`;\n    const agentId = hash(rand);\n\n    const template = this.registeredTemplates[serializeHash(dna_hash)];\n    if (!template) {\n      throw new Error(`The given dna is not registered on this conductor`);\n    }\n\n    const dna: SimulatedDna = {\n      ...template,\n      properties,\n      uuid,\n    };\n    const dnaHash = hash(dna);\n    this.registeredDnas[serializeHash(dnaHash)] = dna;\n\n    const cellId: CellId = [dnaHash, agentId];\n    const cell = await Cell.create(this, cellId, membrane_proof);\n\n    this.cells.push({ id: cell.cellId, cell });\n\n    return cell;\n  }\n\n  callZomeFn(args: {\n    cellId: CellId;\n    zome: string;\n    fnName: string;\n    payload: any;\n    cap: string;\n  }): Promise<any> {\n    const dnaHashStr = serializeHash(args.cellId[0]);\n    const agentPubKeyStr = serializeHash(args.cellId[1]);\n    const cell = this.cells.find(\n      cell =>\n        serializeHash(cell.id[0]) === dnaHashStr &&\n        serializeHash(cell.id[1]) === agentPubKeyStr\n    );\n\n    if (!cell)\n      throw new Error(\n        `No cells existst with cellId ${dnaHashStr}:${agentPubKeyStr}`\n      );\n\n    return cell.cell.callZomeFn({\n      zome: args.zome,\n      cap: args.cap,\n      fnName: args.fnName,\n      payload: args.payload,\n    });\n  }\n}\n","import { SimulatedDnaTemplate, SimulatedZome } from './simulated-dna';\n\nexport const sampleZome: SimulatedZome = {\n  name: 'sample',\n  entry_defs: [\n    {\n      id: 'sample_entry',\n      visibility: 'Public',\n    },\n    {\n      id: 'path',\n      visibility: 'Public',\n    },\n  ],\n  zome_functions: {\n    create_entry: {\n      call: ({ create_entry }) => ({ content }) => {\n        return create_entry({ content, entry_def_id: 'sample_entry' });\n      },\n      arguments: [{ name: 'content', type: 'any' }],\n    },\n    create_link: {\n      call: ({ create_link }) => ({ base, target, tag }) => {\n        return create_link({ base, target, tag });\n      },\n      arguments: [\n        { name: 'base', type: 'EntryHash' },\n        { name: 'target', type: 'EntryHash' },\n        { name: 'any', type: 'EntryHash' },\n      ],\n    },\n    create_path: {\n      call: hdk => ({ pathContent }) => {\n        return hdk.path.ensure(pathContent, hdk);\n      },\n      arguments: [{ name: 'pathContent', type: 'String' }],\n    },\n    /*     update_entry: ({ content, type, original_header_hash }) => [],\n    delete_entry: ({ deletes_address }) => [],\n    create_link: ({ base, target, tag }) => [],\n    delete_link: ({ link_add_address }) => [],\n */\n  },\n};\n\nexport function sampleDnaTemplate(): SimulatedDnaTemplate {\n  const zomes = [sampleZome];\n  return {\n    zomes,\n  };\n}\n","import { Conductor } from '../core/conductor';\n\nexport function hookUpConductors(conductors: Conductor[]) {\n  for (let i = 0; i < conductors.length; i += 1) {\n    for (let j = 0; j < conductors.length; j += 1) {\n      if (i !== j) {\n        conductors[i].network.connectWith(conductors[j]);\n      }\n    }\n  }\n}\n","import { Conductor } from '../core/conductor';\nimport { SimulatedDna, SimulatedDnaTemplate } from '../dnas/simulated-dna';\nimport { hookUpConductors } from './message';\n\nexport async function createConductors(\n  conductorsToCreate: number,\n  currentConductors: Conductor[],\n  dnaTemplate: SimulatedDnaTemplate\n): Promise<Conductor[]> {\n  const newConductorsPromises: Promise<Conductor>[] = [];\n  for (let i = 0; i < conductorsToCreate; i++) {\n    const conductor = Conductor.create();\n    newConductorsPromises.push(conductor);\n  }\n\n  const newConductors = await Promise.all(newConductorsPromises);\n\n  const allConductors = [...currentConductors, ...newConductors];\n\n  await Promise.all(\n    allConductors.map(async c => {\n      const dnaHash = await c.registerDna(dnaTemplate);\n      await c.installApp(dnaHash, null, null, '');\n    })\n  );\n\n  hookUpConductors(allConductors);\n\n  return allConductors;\n}\n"],"names":["v","m","b2b","b2s","blake"],"mappings":"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AAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;AACtD,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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AAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE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"}