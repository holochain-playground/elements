var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Snackbar } from 'scoped-material-components/mwc-snackbar';
import { CircularProgress } from 'scoped-material-components/mwc-circular-progress';
import { IconButton } from 'scoped-material-components/mwc-icon-button';
import { ProviderMixin } from 'lit-element-context';
import { LitElement, html, css, query, property, } from 'lit-element';
import { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';
import { createConductors, sampleDnaTemplate, } from '@holochain-playground/core';
export class HolochainPlaygroundContainer extends ProviderMixin(Scoped(LitElement)) {
    constructor() {
        super(...arguments);
        this.numberOfSimulatedConductors = 10;
        this.simulatedDnaTemplate = sampleDnaTemplate();
        this.conductors = [];
    }
    static get provide() {
        return [
            'activeDna',
            'activeAgentPubKey',
            'activeEntryHash',
            'conductors',
            'conductorsUrls',
        ];
    }
    static get styles() {
        return css `
      :host {
        display: contents;
      }
    `;
    }
    async firstUpdated() {
        if (!this.conductorsUrls) {
            this.conductors = await createConductors(this.numberOfSimulatedConductors, [], this.simulatedDnaTemplate);
            this.activeDna = this.conductors[0].getAllCells()[0].dnaHash;
            this.dispatchEvent(new CustomEvent('ready', {
                bubbles: true,
                composed: true,
                detail: {
                    activeDna: this.activeDna,
                    activeAgentPubKey: this.activeAgentPubKey,
                    activeEntryHash: this.activeEntryHash,
                    conductors: this.conductors,
                    conductorsUrls: this.conductorsUrls,
                },
            }));
        }
        this.addEventListener('update-context', (e) => {
            const keys = Object.keys(e.detail);
            for (const key of keys) {
                this[key] = e.detail[key];
            }
        });
        this.addEventListener('show-message', (e) => {
            this.showMessage(e.detail.message);
        });
        /*
        this.blackboard.select('conductorsUrls').subscribe(async (urls) => {
          if (urls !== undefined) {
            try {
              // await connectToConductors(this.blackboard, urls);
            } catch (e) {
              console.error(e);
              this.showError('Error when connecting with the nodes');
            }
          }
        }); */
    }
    showMessage(message) {
        this.message = message;
        this.snackbar.show();
    }
    renderSnackbar() {
        return html `
      <mwc-snackbar id="snackbar" labelText=${this.message}>
        <mwc-icon-button icon="close" slot="dismiss"></mwc-icon-button>
      </mwc-snackbar>
    `;
    }
    render() {
        return html `
      ${this.renderSnackbar()}
      ${this.conductors
            ? html ` <slot></slot> `
            : html ` <mwc-circular-progress></mwc-circular-progress>`}
    `;
    }
    static get scopedElements() {
        return {
            'mwc-circular-progress': CircularProgress,
            'mwc-snackbar': Snackbar,
            'mwc-icon-button': IconButton,
        };
    }
}
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], HolochainPlaygroundContainer.prototype, "numberOfSimulatedConductors", void 0);
__decorate([
    property({ type: Object }),
    __metadata("design:type", Object)
], HolochainPlaygroundContainer.prototype, "simulatedDnaTemplate", void 0);
__decorate([
    query('#snackbar'),
    __metadata("design:type", Snackbar)
], HolochainPlaygroundContainer.prototype, "snackbar", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], HolochainPlaygroundContainer.prototype, "message", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], HolochainPlaygroundContainer.prototype, "activeDna", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], HolochainPlaygroundContainer.prototype, "activeAgentPubKey", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], HolochainPlaygroundContainer.prototype, "activeEntryHash", void 0);
__decorate([
    property({ type: Array }),
    __metadata("design:type", Array)
], HolochainPlaygroundContainer.prototype, "conductors", void 0);
__decorate([
    property({ type: Array }),
    __metadata("design:type", Array)
], HolochainPlaygroundContainer.prototype, "conductorsUrls", void 0);
//# sourceMappingURL=holochain-playground-container.js.map