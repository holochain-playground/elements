var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { property } from 'lit-element';
import { ConsumerMixin } from 'lit-element-context';
export const PlaygroundMixin = (baseClass) => {
    class PE extends ConsumerMixin(baseClass) {
        constructor() {
            super(...arguments);
            this.conductors = [];
        }
        static get inject() {
            return [
                'activeDna',
                'activeAgentPubKey',
                'activeEntryHash',
                'conductors',
                'conductorsUrls',
            ];
        }
        updatePlayground(context) {
            this.dispatchEvent(new CustomEvent('update-context', {
                bubbles: true,
                composed: true,
                detail: context,
            }));
        }
        showMessage(message) {
            this.dispatchEvent(new CustomEvent('show-message', {
                bubbles: true,
                composed: true,
                detail: { message },
            }));
        }
    }
    __decorate([
        property({ type: String }),
        __metadata("design:type", Object)
    ], PE.prototype, "activeDna", void 0);
    __decorate([
        property({ type: String }),
        __metadata("design:type", Object)
    ], PE.prototype, "activeAgentPubKey", void 0);
    __decorate([
        property({ type: String }),
        __metadata("design:type", Object)
    ], PE.prototype, "activeEntryHash", void 0);
    __decorate([
        property({ type: Array }),
        __metadata("design:type", Array)
    ], PE.prototype, "conductors", void 0);
    __decorate([
        property({ type: Array }),
        __metadata("design:type", Array)
    ], PE.prototype, "conductorsUrls", void 0);
    return PE;
};
//# sourceMappingURL=holochain-playground-mixin.js.map