"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var rpc_websockets_1 = require("rpc-websockets");
require('isomorphic-fetch');
var CONDUCTOR_CONFIG = '/_dna_connections.json';
var DEFAULT_TIMEOUT = 5000;
/**
 * Establish a websocket connection to a Conductor interface
 * Accepts an object of options:
 *   - url (optional): Specifies the URL to establish the connection with
 *   - wsClient (optional): Object of options that gets passed through as configuration to the rpc-websockets client
 *   - timeout (optional): If the socket is not ready, `call` and `callZome` will wait this many milliseconds for the
 *       socket to be ready before timing out and rejecting the promise. Defaults to 5 seconds, but if you set it
 *       to 0 or null, it will never timeout.
 */
exports.connect = function (opts) {
    if (opts === void 0) { opts = {}; }
    return new Promise(function (fulfill, reject) { return __awaiter(_this, void 0, void 0, function () {
        var url, _a, timeout, ws;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = opts.url;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, getUrlFromConductor().catch(function () { return reject('Could not auto-detect DNA interface from conductor. \
Ensure the web UI is hosted by a Holochain Conductor or manually specify url as parameter to connect'); })];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    url = _a;
                    timeout = opts.timeout || DEFAULT_TIMEOUT;
                    ws = new rpc_websockets_1.Client(url, opts.wsClient);
                    ws.on('open', function () { return 'WS open'; });
                    ws.on('close', function () { return 'WS closed'; });
                    ws.on('error', function (e) { return reject(e || 'Could not establish websocket connection with requested url'); });
                    ws.once('open', function () {
                        var call = function () {
                            var methodSegments = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                methodSegments[_i] = arguments[_i];
                            }
                            return function (params) {
                                var method = methodSegments.length === 1 ? methodSegments[0] : methodSegments.join('/');
                                return callWhenConnected(ws, method, params, opts.timeout);
                            };
                        };
                        var callZome = function (instanceId, zome, func) { return function (args) {
                            var callObject = {
                                'instance_id': instanceId,
                                zome: zome,
                                'function': func,
                                args: args
                            };
                            return callWhenConnected(ws, 'call', callObject, opts.timeout);
                        }; };
                        var onSignal = function (callback) {
                            // go down to the underlying websocket connection (.socket)
                            // for a simpler API
                            ws.socket.on('message', function (message) {
                                if (!message)
                                    return;
                                var msg = JSON.parse(message);
                                if (msg.signal || msg.instance_stats) {
                                    callback(msg);
                                }
                            });
                        };
                        // define a function which will close the websocket connection
                        var close = function () { return ws.close(); };
                        fulfill({ call: call, callZome: callZome, close: close, onSignal: onSignal, ws: ws });
                    });
                    return [2 /*return*/];
            }
        });
    }); });
};
function getUrlFromConductor() {
    return fetch(CONDUCTOR_CONFIG)
        .then(function (data) { return data.json(); })
        .then(function (json) { return json.dna_interface.driver.port; })
        .then(function (port) { return "ws://localhost:" + port; });
}
/**
 * Ensure that a ws client never attempts to call when the socket is not ready
 * Instead, return a promise that resolves only when the socket is connected and the call is made
 */
function callWhenConnected(ws, method, payload, timeout) {
    if (timeout === void 0) { timeout = null; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (ws.ready) {
                return [2 /*return*/, Promise.resolve(ws.call(method, payload))];
            }
            else {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var timer = timeout
                            ? setTimeout(function () {
                                reject("Timeout while waiting for ws to connect. method: " + method + ", payload: " + JSON.stringify(payload));
                            }, timeout)
                            : null;
                        ws.once('open', function () {
                            clearTimeout(timer);
                            ws.call(method, payload).then(resolve).catch(reject);
                        });
                    })];
            }
            return [2 /*return*/];
        });
    });
}
var holochainclient = { connect: exports.connect };
