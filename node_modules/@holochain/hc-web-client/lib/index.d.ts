declare type Call = (...segments: Array<string>) => (params: any) => Promise<any>;
declare type CallZome = (instanceId: string, zome: string, func: string) => (params: any) => Promise<any>;
declare type OnSignal = (callback: (params: any) => void) => void;
declare type Close = () => Promise<any>;
declare type ConnectOpts = {
    url?: string;
    timeout?: number;
    wsClient?: any;
};
/**
 * Establish a websocket connection to a Conductor interface
 * Accepts an object of options:
 *   - url (optional): Specifies the URL to establish the connection with
 *   - wsClient (optional): Object of options that gets passed through as configuration to the rpc-websockets client
 *   - timeout (optional): If the socket is not ready, `call` and `callZome` will wait this many milliseconds for the
 *       socket to be ready before timing out and rejecting the promise. Defaults to 5 seconds, but if you set it
 *       to 0 or null, it will never timeout.
 */
export declare const connect: (opts?: ConnectOpts) => Promise<{
    call: Call;
    callZome: CallZome;
    close: Close;
    onSignal: OnSignal;
    ws: any;
}>;
export {};
