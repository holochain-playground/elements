{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import fs from 'fs';\nimport util from 'util';\nimport { Plugin, ExistingRawSourceMap } from 'rollup';\nimport { createFilter, CreateFilter } from '@rollup/pluginutils';\nimport { resolveSourceMap, resolveSources } from 'source-map-resolve';\n\nconst promisifiedResolveSourceMap = util.promisify(resolveSourceMap);\nconst promisifiedResolveSources = util.promisify(resolveSources);\n\nexport interface SourcemapsPluginOptions {\n  include?: Parameters<CreateFilter>[0];\n  exclude?: Parameters<CreateFilter>[1];\n  readFile?(path: string, callback: (error: Error | null, data: Buffer | string) => void): void;\n}\n\nexport default function sourcemaps({\n  include,\n  exclude,\n  readFile = fs.readFile,\n}: SourcemapsPluginOptions = {}): Plugin {\n  const filter = createFilter(include, exclude);\n  const promisifiedReadFile = util.promisify(readFile);\n\n  return {\n    name: 'sourcemaps',\n\n    async load(id: string) {\n      if (!filter(id)) {\n        return null;\n      }\n\n      let code: string;\n      try {\n        code = (await promisifiedReadFile(id)).toString();\n      } catch {\n        // Failed reading file, let the next plugin deal with it\n        return null;\n      }\n\n      let map: ExistingRawSourceMap;\n      try {\n        const result = await promisifiedResolveSourceMap(code, id, readFile);\n\n        // The code contained no sourceMappingURL,\n        if (result === null) {\n          return code;\n        }\n\n        map = result.map;\n      } catch {\n        // Failed resolving source map, just return the source\n        return code;\n      }\n\n      // Resolve sources if they're not included\n      if (map.sourcesContent === undefined) {\n        try {\n          const { sourcesContent } = await promisifiedResolveSources(map, id, readFile);\n          if (sourcesContent.every(util.isString)) {\n            map.sourcesContent = sourcesContent as string[];\n          }\n        } catch {\n          // Ignore\n        }\n      }\n\n      return { code, map };\n    },\n  };\n}\n"],"names":["resolveSourceMap","resolveSources","createFilter"],"mappings":";;;;;;;;;AAMA,MAAM,2BAA2B,GAAG,IAAI,CAAC,SAAS,CAACA,iCAAgB,CAAC,CAAC;AACrE,MAAM,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAACC,+BAAc,CAAC,CAAC;AAQjE,SAAwB,UAAU,CAAC,EACjC,OAAO,EACP,OAAO,EACP,QAAQ,GAAG,EAAE,CAAC,QAAQ,MACK,EAAE;IAC7B,MAAM,MAAM,GAAGC,wBAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC9C,MAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAErD,OAAO;QACL,IAAI,EAAE,YAAY;QAElB,MAAM,IAAI,CAAC,EAAU;YACnB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;gBACf,OAAO,IAAI,CAAC;aACb;YAED,IAAI,IAAY,CAAC;YACjB,IAAI;gBACF,IAAI,GAAG,CAAC,MAAM,mBAAmB,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC;aACnD;YAAC,WAAM;;gBAEN,OAAO,IAAI,CAAC;aACb;YAED,IAAI,GAAyB,CAAC;YAC9B,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,2BAA2B,CAAC,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;;gBAGrE,IAAI,MAAM,KAAK,IAAI,EAAE;oBACnB,OAAO,IAAI,CAAC;iBACb;gBAED,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;aAClB;YAAC,WAAM;;gBAEN,OAAO,IAAI,CAAC;aACb;;YAGD,IAAI,GAAG,CAAC,cAAc,KAAK,SAAS,EAAE;gBACpC,IAAI;oBACF,MAAM,EAAE,cAAc,EAAE,GAAG,MAAM,yBAAyB,CAAC,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;oBAC9E,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;wBACvC,GAAG,CAAC,cAAc,GAAG,cAA0B,CAAC;qBACjD;iBACF;gBAAC,WAAM;;iBAEP;aACF;YAED,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;SACtB;KACF,CAAC;CACH;;;;"}