{"version":3,"sources":["webpack://MessagePack/webpack/universalModuleDefinition","webpack://MessagePack/./src/utils/utf8.ts","webpack://MessagePack/./src/ExtData.ts","webpack://MessagePack/./src/utils/int.ts","webpack://MessagePack/./src/timestamp.ts","webpack://MessagePack/./src/ExtensionCodec.ts","webpack://MessagePack/./src/utils/typedArrays.ts","webpack://MessagePack/./src/Encoder.ts","webpack://MessagePack/./src/encode.ts","webpack://MessagePack/./src/utils/prettyByte.ts","webpack://MessagePack/./src/CachedKeyDecoder.ts","webpack://MessagePack/./src/Decoder.ts","webpack://MessagePack/./src/decode.ts","webpack://MessagePack/./src/utils/stream.ts","webpack://MessagePack/./src/decodeAsync.ts","webpack://MessagePack/webpack/bootstrap","webpack://MessagePack/webpack/startup","webpack://MessagePack/webpack/runtime/define property getters","webpack://MessagePack/webpack/runtime/hasOwnProperty shorthand","webpack://MessagePack/webpack/runtime/make namespace object"],"names":["root","factory","exports","module","define","amd","this","TEXT_ENCODING_AVAILABLE","process","TextEncoder","TextDecoder","STR_SIZE_MAX","utf8Count","str","strLength","length","byteLength","pos","value","charCodeAt","extra","sharedTextEncoder","undefined","TEXT_ENCODER_THRESHOLD","utf8EncodeTE","encodeInto","output","outputOffset","subarray","set","encode","utf8DecodeJs","bytes","inputOffset","offset","end","units","result","byte1","push","byte2","byte3","unit","String","fromCharCode","sharedTextDecoder","TEXT_DECODER_THRESHOLD","type","data","setInt64","view","high","Math","floor","low","setUint32","getInt64","getInt32","getUint32","EXT_TIMESTAMP","encodeTimeSpecToTimestamp","sec","nsec","rv","Uint8Array","DataView","buffer","secHigh","secLow","encodeDateToTimeSpec","date","msec","getTime","nsecInSec","encodeTimestampExtension","object","Date","decodeTimestampToTimeSpec","byteOffset","nsec30AndSecHigh2","Error","decodeTimestampExtension","timeSpec","timestampExtension","decode","builtInEncoders","builtInDecoders","encoders","decoders","register","index","tryToEncode","context","i","encodeExt","ExtData","decodeExt","defaultCodec","ExtensionCodec","ensureUint8Array","ArrayBuffer","isView","from","extensionCodec","maxDepth","initialBufferSize","sortKeys","forceFloat32","ignoreUndefined","forceIntegerToFloat","getUint8Array","reinitializeState","doEncode","depth","encodeNil","encodeBoolean","encodeNumber","encodeString","encodeObject","ensureBufferSizeToWrite","sizeToWrite","requiredSize","resizeBuffer","newSize","newBuffer","newBytes","newView","writeU8","Number","isSafeInteger","writeU16","writeU32","writeU64","writeI8","writeI16","writeI32","writeI64","writeF32","writeF64","writeStringHeader","utf8EncodeJs","ext","encodeExtension","Array","isArray","encodeArray","encodeBinary","Object","prototype","toString","apply","encodeMap","size","writeU8a","item","countWithoutUndefined","keys","count","sort","key","setUint8","values","setInt8","setUint16","setInt16","setInt32","setFloat32","setFloat64","setUint64","defaultEncodeOptions","options","Encoder","prettyByte","byte","abs","padStart","maxKeyLength","maxLengthPerKey","hit","miss","caches","canBeCached","get","records","FIND_CHUNK","record","recordBytes","j","store","random","cachedValue","slicedCopyOfBytes","slice","call","EMPTY_VIEW","EMPTY_BYTES","DataViewIndexOutOfBoundsError","getInt8","e","constructor","MORE_DATA","DEFAULT_MAX_LENGTH","sharedCachedKeyDecoder","CachedKeyDecoder","maxStrLength","maxBinLength","maxArrayLength","maxMapLength","maxExtLength","keyDecoder","totalPos","headByte","stack","setBuffer","bufferView","createDataView","appendBuffer","hasRemaining","remainingData","newData","concated","createExtraByteError","posToShow","RangeError","doDecodeSync","decodeAsync","stream","decoded","decodeArrayStream","decodeMultiAsync","decodeStream","isArrayHeaderRequired","arrayItemsLeft","readArraySize","complete","DECODE","readHeadByte","pushMapState","pushArrayState","decodeUtf8String","readF32","readF64","readU8","readU16","readU32","readU64","readI8","readI16","readI32","readI64","lookU8","lookU16","lookU32","decodeBinary","decodeExtension","state","array","position","pop","keyType","map","readCount","headerOffset","stateIsMapKey","stringBytes","utf8DecodeTD","headOffset","extType","getUint8","getUint16","getInt16","getFloat32","getFloat64","defaultDecodeOptions","Decoder","assertNonNull","ensureAsyncIterable","streamLike","Symbol","asyncIterator","reader","getReader","read","done","releaseLock","asyncIterableFromStream","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","r","toStringTag"],"mappings":"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","file":"msgpack.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MessagePack\"] = factory();\n\telse\n\t\troot[\"MessagePack\"] = factory();\n})(this, function() {\nreturn ","const TEXT_ENCODING_AVAILABLE =\n  typeof process !== \"undefined\" &&\n  process.env.TEXT_ENCODING !== \"never\" &&\n  typeof TextEncoder !== \"undefined\" &&\n  typeof TextDecoder !== \"undefined\";\n\nconst STR_SIZE_MAX = 0xffff_ffff; // uint32_max\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? STR_SIZE_MAX\n  : typeof process !== \"undefined\" && process.env.TEXT_ENCODING !== \"force\"\n  ? 200\n  : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++]!;\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      const byte4 = bytes[offset++]! & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? STR_SIZE_MAX\n  : typeof process !== \"undefined\" && process.env.TEXT_DECODER !== \"force\"\n  ? 200\n  : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder!.decode(stringBytes);\n}\n","/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n","// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number) {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number) {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n","// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new Error(`Unrecognized data size for timestamp: ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n","// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interfce to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n","export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer) {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n","import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private getUint8Array(): Uint8Array {\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.getUint8Array();\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // nagative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Encoder } from \"./Encoder\";\nimport { ContextOf, SplitUndefined } from \"./context\";\n\nexport type EncodeOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n    maxDepth: number;\n    initialBufferSize: number;\n    sortKeys: boolean;\n\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * The default is `false`. Note that it needs more time to encode.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point,\n     * with the `forceFloat32` option taken into account.\n     *\n     * The default is `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst defaultEncodeOptions: EncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options: EncodeOptions<SplitUndefined<ContextType>> = defaultEncodeOptions as any,\n): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n    options.ignoreUndefined,\n    options.forceIntegerToFloat,\n  );\n  return encoder.encode(value);\n}\n","export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n","import { utf8DecodeJs } from \"./utils/utf8\";\n\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly value: string;\n}\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)` to create a non-sparse array for performance.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number) {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private get(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1]!;\n\n    FIND_CHUNK: for (const record of records) {\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.value;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1]!;\n    const record: KeyCacheRecord = { bytes, value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to a randomized position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.get(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const value = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, value);\n    return value;\n  }\n}\n","import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64 } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst DEFAULT_MAX_LENGTH = 0xffff_ffff; // uint32_max\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType> {\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: Array<StackState> = [];\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxStrLength = DEFAULT_MAX_LENGTH,\n    private readonly maxBinLength = DEFAULT_MAX_LENGTH,\n    private readonly maxArrayLength = DEFAULT_MAX_LENGTH,\n    private readonly maxMapLength = DEFAULT_MAX_LENGTH,\n    private readonly maxExtLength = DEFAULT_MAX_LENGTH,\n    private readonly keyDecoder: KeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | ArrayBuffer): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number>) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining()) {\n      this.setBuffer(buffer);\n    } else {\n      // retried because data is insufficient\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n      const concated = new Uint8Array(remainingData.length + newData.length);\n      concated.set(remainingData);\n      concated.set(newData, remainingData.length);\n      this.setBuffer(concated);\n    }\n  }\n\n  private hasRemaining(size = 1) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  public decode(buffer: ArrayLike<number> | ArrayBuffer): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining()) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number>>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining()) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(stream: AsyncIterable<ArrayLike<number>>) {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number>>) {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number>>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new Error(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1]!;\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new Error(\"The type of key must be string or number but \" + typeof object);\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new Error(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new Error(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new Error(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new Error(`Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`);\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1]!;\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new Error(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new Error(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n","import { ExtensionCodecType } from \"./ExtensionCodec\";\nimport { Decoder } from \"./Decoder\";\nimport { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     * Default to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a MessagePack-encoded buffer.\n *\n * This is a synchronous decoding function. See other variants for asynchronous decoding: `decodeAsync()`, `decodeStream()`, `decodeArrayStream()`.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | ArrayBuffer,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n","// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n","import { Decoder } from \"./Decoder\";\nimport { defaultDecodeOptions, DecodeOptions } from \"./decode\";\nimport { ensureAsyncIterable, ReadableStreamLike } from \"./utils/stream\";\nimport { SplitUndefined } from \"./context\";\n\nexport async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\nexport function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n) {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number>>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n) {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(870);\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}