import { __awaiter, __generator } from "tslib";
import { Decoder } from "./Decoder.mjs";
import { ensureAsyncIterable } from "./utils/stream.mjs";
import { defaultDecodeOptions } from "./decode.mjs";
export function decodeAsync(streamLike, options) {
    if (options === void 0) { options = defaultDecodeOptions; }
    return __awaiter(this, void 0, void 0, function () {
        var stream, decoder;
        return __generator(this, function (_a) {
            stream = ensureAsyncIterable(streamLike);
            decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);
            return [2 /*return*/, decoder.decodeAsync(stream)];
        });
    });
}
export function decodeArrayStream(streamLike, options) {
    if (options === void 0) { options = defaultDecodeOptions; }
    var stream = ensureAsyncIterable(streamLike);
    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);
    return decoder.decodeArrayStream(stream);
}
export function decodeMultiStream(streamLike, options) {
    if (options === void 0) { options = defaultDecodeOptions; }
    var stream = ensureAsyncIterable(streamLike);
    var decoder = new Decoder(options.extensionCodec, options.context, options.maxStrLength, options.maxBinLength, options.maxArrayLength, options.maxMapLength, options.maxExtLength);
    return decoder.decodeStream(stream);
}
/**
 * @deprecated Use {@link decodeMultiStream()} instead.
 */
export function decodeStream(streamLike, options) {
    if (options === void 0) { options = defaultDecodeOptions; }
    return decodeMultiStream(streamLike, options);
}
//# sourceMappingURL=decodeAsync.mjs.map