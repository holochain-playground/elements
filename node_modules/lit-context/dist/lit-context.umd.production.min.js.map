{"version":3,"file":"lit-context.umd.production.min.js","sources":["../src/types/context.ts","../src/lib/context-provider.ts","../src/lib/context.ts","../src/lib/context-consumer.ts","../src/decorators/consume.ts","../src/lib/context-creator.ts"],"sourcesContent":["/**\n * Copyright (c) 2020 Dorian Cortes, Gary Valverde\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\ninterface IContext {\n    getValue(): object\n    setValue(newValue: object): void\n}\n\nexport type MapFn<T = object> = (providerNewValue?: T, providerOldValue?: T) => void;\n\nexport class Context implements IContext {\n    value: object;\n    subscriptions: Set<Function>;\n\n    constructor(initialValue: object) {\n        this.value = initialValue;\n        this.subscriptions = new Set<Function>()\n    }\n\n    getValue() {\n        return this.value;\n    }\n\n    setValue(newValue: object) {\n        const oldValue = this.value;\n        this.value = newValue;\n        this.subscriptions?.forEach(subscription => subscription(newValue, oldValue));\n    }\n}","/**\n * Copyright (c) 2020 Dorian Cortes, Gary Valverde\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { LitElement, html, property } from 'lit-element';\nimport { createContext } from './context';\nimport { Context } from '../types/context';\n\n/**\n * Context Provider\n * @class\n */\nexport class ContextProvider extends LitElement {\n  @property({ type: Context })\n  context: Context;\n\n  @property({ type: Object })\n  value: object = {};\n\n  constructor() {\n    super();\n    this.context = createContext(this.value);\n  }\n\n  render() {\n    this.context.setValue(this.value);\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","/**\n * Copyright (c) 2020 Dorian Cortes, Gary Valverde\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { Context } from \"../types/context\";\n\n/**\n * \n * @param initialValue \n * @return { Context }\n */\nexport function createContext(initialValue: object): Context {\n  const context = new Context(initialValue);\n  return context;\n}\n\nexport function consumeContext(context: Context, callback: Function) {\n  /**\n   * Get the subscriptions to a context\n   */\n  const { subscriptions } = context;\n  /**\n   * Add the new subscription\n   */\n  subscriptions?.add(callback);\n  /**\n   * \n   */\n  callback(context?.getValue());\n\n  return () => {\n    subscriptions?.delete(callback);\n  }\n}\n\n","/**\n * Copyright (c) 2020 Dorian Cortes, Gary Valverde\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { consumeContext } from \"./context\";\nimport { ContextProvider } from \"./context-provider\";\nimport { MapFn } from \"../types/context\";\n\n/**\n * Context Consumer\n * @param providerTag\n * @param consumer \n * @param mapFn \n */\nexport const contextConsumer = <T = object>(providerTag: string, consumer: Element, mapFn?: MapFn<T>) => {\n  let provider: ContextProvider | null = null;\n  let node: Element | null = consumer;\n\n  do {\n    let slot: Boolean = node.assignedSlot instanceof HTMLSlotElement;\n    /**\n     * Find the node's closest provider tag\n     */\n    provider = node?.closest(providerTag);\n\n    /**\n     * If within a slot \n     */\n    let parentIsSlotted;\n    if (slot && provider === null) {\n      provider = node?.assignedSlot?.closest(providerTag) || null;\n      /**\n       * If provider remains null\n       */\n      if (provider === null) {\n        /**\n         * Then check if the parent node of the slotted element is slotted as well\n         */\n        parentIsSlotted = node?.parentElement?.assignedSlot instanceof HTMLSlotElement;\n      }\n    }\n\n    /**\n     * Find the root node\n     */\n    let root: Element | ShadowRoot | null = node?.getRootNode() as ShadowRoot;\n\n    /**\n     * If within a slot\n     */\n    if (slot && root === null) {\n      root = node?.assignedSlot?.getRootNode() as ShadowRoot || null;\n    } \n    /**\n     * Set the node to the root host\n     */\n    node = parentIsSlotted ? node?.parentElement : root?.host;\n  } while (!provider && node);\n\n  /**\n   * If there's a valid provider\n   */\n  if (provider) {\n    /**\n     * Register the context to be consumed\n     */\n    const unsubscribe = consumeContext(provider.context, (providerNewValue: T, providerOldValue: T) => {\n      if (!consumer.isConnected) {\n        unsubscribe();\n      } else if (mapFn instanceof Function) {\n        mapFn.call(consumer, providerNewValue, providerOldValue);\n      } else {\n        Object.assign(consumer, providerNewValue);\n      }\n    });\n  }\n};","/**\n * Copyright (c) 2020 Dorian Cortes, Gary Valverde\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { contextConsumer } from \"../lib/context-consumer\";\nimport { MapFn } from \"../types/context\";\n\n/**\n * @param providerTag Provider tag name\n * @param mapFn  Function to map provider value\n */\nexport type Constructor<T> = {\n    // tslint:disable-next-line:no-any\n    new(...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n    kind: 'class';\n    elements: ClassElement[];\n    finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n    kind: 'field' | 'method';\n    key: PropertyKey;\n    placement: 'static' | 'prototype' | 'own';\n    initializer?: Function;\n    extras?: ClassElement[];\n    finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n    descriptor?: PropertyDescriptor;\n}\n\nexport const consume = <T = object>(providerTag: string, mapFn?: MapFn<T>) =>\n    (classOrDescriptor: Constructor<HTMLElement> | ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n            legacyCustomElement<T>(classOrDescriptor, providerTag, mapFn) :\n            standardCustomElement<T>(classOrDescriptor, providerTag, mapFn);\n\nconst legacyCustomElement =\n    <T = object>(classConstructor: Constructor<HTMLElement>, providerTag: string, mapFn?: MapFn<T>) => {\n        const consumer = (consumer: HTMLElement, mapFn?: MapFn<T>) => contextConsumer(providerTag, consumer, mapFn);\n        return class extends classConstructor {\n            connectedCallback() {\n                super.connectedCallback();\n                consumer(this, mapFn);\n            }\n        } as any\n    };\n\nconst standardCustomElement =\n    <T = object>(classConstructor: ClassDescriptor, providerTag: string, mapFn?: MapFn<T>) => {\n        const { kind, elements } = classConstructor;\n        const consumer = (consumer: HTMLElement, mapFn?: MapFn<T>) => contextConsumer(providerTag, consumer, mapFn);\n        return {\n            kind,\n            elements,\n            finisher(clazz: Constructor<HTMLElement>) {\n                clazz.prototype.__litContextConnectedCallback = clazz.prototype.connectedCallback;\n                clazz.prototype.connectedCallback = function connectedCallbackHandler() {\n                  this.__litContextConnectedCallback();\n                  consumer(this, mapFn);\n                };\n            }\n        };\n    };","/**\n * Copyright (c) 2020 Dorian Cortes, Gary Valverde\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { ContextProvider } from \"./context-provider\";\nimport { contextConsumer } from \"./context-consumer\";\nimport { consume } from '../decorators/consume';\nimport { MapFn } from \"../types/context\";\n\n/**\n * @param providerTagName Provider name (Note: It will be used to generate its custom element tag name)\n * @returns Context information and consume functionalities\n */\nexport const createContext = (providerName: string, defaultValue: object = {}) => {\n  const tagName = providerName + '-provider';\n\n  if (!customElements.get(tagName)) {\n    customElements.define(tagName, class extends ContextProvider {\n      value: object = defaultValue;\n    });\n  }\n\n  return {\n    getTagName: (): string => tagName,\n    consumer: (consumer: HTMLElement, mapFn?: MapFn) => contextConsumer(tagName, consumer, mapFn),\n    consume: (mapFn?: MapFn) => consume(tagName, mapFn) as any\n  }\n}"],"names":["Context","constructor","initialValue","value","subscriptions","Set","getValue","this","setValue","newValue","oldValue","forEach","subscription","ContextProvider","LitElement","context","render","html","property","type","Object","contextConsumer","providerTag","consumer","mapFn","provider","node","parentIsSlotted","slot","assignedSlot","HTMLSlotElement","_node","closest","parentElement","root","_node4","getRootNode","_node6","_root","host","unsubscribe","callback","add","delete","consumeContext","providerNewValue","providerOldValue","isConnected","Function","call","assign","consume","classOrDescriptor","legacyCustomElement","standardCustomElement","classConstructor","connectedCallback","kind","elements","finisher","clazz","prototype","__litContextConnectedCallback","providerName","defaultValue","tagName","customElements","get","define","getTagName"],"mappings":"ySAeaA,EAITC,YAAYC,QACHC,MAAQD,OACRE,cAAgB,IAAIC,IAG7BC,kBACWC,KAAKJ,MAGhBK,SAASC,eACCC,EAAWH,KAAKJ,WACjBA,MAAQM,iBACRL,8BAAeO,QAAQC,GAAgBA,EAAaH,EAAUC,WCf9DG,UAAwBC,aAOnCb,iCAFgB,QAITc,QCTS,IAAIf,EDSWO,KAAKJ,OAGpCa,qBACOD,QAAQP,SAASD,KAAKJ,OACpBc;;qBAbRC,WAAS,CAAEC,KAAMnB,iDAGjBkB,WAAS,CAAEC,KAAMC,4CEFPC,EAAkB,CAAaC,EAAqBC,EAAmBC,SAC9EC,EAAmC,KACnCC,EAAuBH,IAExB,iBAUGI,EATAC,EAAgBF,EAAKG,wBAAwBC,4BAIjDL,YAAWC,sBAAAK,EAAMC,QAAQV,GAMrBM,GAAqB,OAAbH,IACVA,aAAWC,4BAAMG,mCAAcG,QAAQV,KAAgB,KAItC,OAAbG,IAIFE,aAAkBD,4BAAMO,oCAAeJ,wBAAwBC,sBAO/DI,YAAoCR,sBAAAS,EAAMC,sBAK1CR,GAAiB,OAATM,IACVA,aAAOR,4BAAMG,mCAAcO,gBAA+B,MAK5DV,EAAOC,YAAkBD,sBAAAW,EAAMJ,wBAAgBC,sBAAAI,EAAMC,YAC7Cd,GAAYC,MAKlBD,EAAU,OAINe,WDlDqBzB,EAAkB0B,SAIzCrC,cAAEA,GAAkBW,SAI1BX,MAAAA,GAAAA,EAAesC,IAAID,GAInBA,EAAS1B,MAAAA,SAAAA,EAAST,YAEX,KACLF,MAAAA,GAAAA,EAAeuC,OAAOF,ICmCFG,CAAenB,EAASV,QAAS,CAAC8B,EAAqBC,KACpEvB,EAASwB,YAEHvB,aAAiBwB,SAC1BxB,EAAMyB,KAAK1B,EAAUsB,EAAkBC,GAEvC1B,OAAO8B,OAAO3B,EAAUsB,GAJxBL,QClCKW,EAAU,CAAa7B,EAAqBE,IACpD4B,GACiC,mBAAtBA,EACJC,EAAuBD,EAAmB9B,EAAaE,GACvD8B,EAAyBF,EAAmB9B,EAAaE,GAE/D6B,EACF,CAAaE,EAA4CjC,EAAqBE,IAEnE,cAAc+B,EACjBC,0BACUA,oBAHG,EAACjC,EAAuBC,KAAqBH,EAAgBC,EAI7Df,KAJoFiB,IAI7FD,CAAShB,EAAMiB,KAKzB8B,EACF,CAAaC,EAAmCjC,EAAqBE,WAC3DiC,KAAEA,EAAFC,SAAQA,GAAaH,QAEpB,CACHE,KAAAA,EACAC,SAAAA,EACAC,SAASC,GACLA,EAAMC,UAAUC,8BAAgCF,EAAMC,UAAUL,kBAChEI,EAAMC,UAAUL,kBAAoB,gBAC7BM,gCAPE,EAACvC,EAAuBC,KAAqBH,EAAgBC,EAQ3Df,KARkFiB,IAQ3FD,CAAShB,EAAMiB,uFCjDJ,CAACuC,EAAsBC,EAAuB,YACnEC,EAAUF,EAAe,mBAE1BG,eAAeC,IAAIF,IACtBC,eAAeE,OAAOH,EAAS,cAAcpD,EAAdZ,6CACb+D,KAIb,CACLK,WAAY,IAAcJ,EAC1B1C,SAAU,CAACA,EAAuBC,IAAkBH,EAAgB4C,EAAS1C,EAAUC,GACvF2B,QAAU3B,GAAkB2B,EAAQc,EAASzC"}